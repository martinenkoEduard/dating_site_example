from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth.decorators import login_required
from django.contrib import messages
from django.http import HttpResponse

from django.shortcuts import render, redirect, get_object_or_404
from django.http import HttpResponse, JsonResponse
from django.core.management import call_command
from django.contrib.auth.models import User
from django.contrib.auth.decorators import login_required
from django.contrib import messages
from django.db.utils import OperationalError
from django.db.models import Q
from django.core.paginator import Paginator, EmptyPage, PageNotAnInteger
from django.core.cache import cache
from django.conf import settings
from django import forms
import os


from ..models import Profile
from ..forms import ProfileForm, ProfileSearchForm, AdvancedProfileSearchForm
from ..cache_utils import (
    get_cached_user_profile, invalidate_user_profile_cache,
    get_cached_profile_stats, get_cached_recent_profiles,
    invalidate_search_cache
)

from ..models import Profile, Photo
from ..forms import PhotoUploadForm, MultiplePhotoUploadForm




@login_required
def manage_photos(request):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ –ø—Ä–æ—Ñ–∏–ª—è"""
    try:
        profile = Profile.objects.get(user=request.user)
    except Profile.DoesNotExist:
        messages.info(request, '–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å!')
        return redirect('profiles:create_profile')
    
    photos = profile.photos.all().order_by('-is_primary', '-uploaded_at')
    
    return render_photos_management(request, profile, photos)


@login_required
def upload_photo(request):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –æ–¥–Ω–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"""
    try:
        profile = Profile.objects.get(user=request.user)
    except Profile.DoesNotExist:
        messages.error(request, '–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å!')
        return redirect('profiles:create_profile')
    
    if request.method == 'POST':
        form = PhotoUploadForm(request.POST, request.FILES, profile=profile)
        if form.is_valid():
            photo = form.save()
            messages.success(request, '–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!')
            return redirect('profiles:manage_photos')
        else:
            messages.error(request, '–û—à–∏–±–∫–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ.')
    else:
        form = PhotoUploadForm(profile=profile)
    
    return render_photo_upload_form(request, form, '–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏', single=True)


@login_required
def upload_multiple_photos(request):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
    try:
        profile = Profile.objects.get(user=request.user)
    except Profile.DoesNotExist:
        messages.error(request, '–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å!')
        return redirect('profiles:create_profile')
    
    if request.method == 'POST':
        form = MultiplePhotoUploadForm(request.POST, request.FILES, profile=profile)
        if form.is_valid():
            files = form.cleaned_data['images']
            uploaded_count = 0
            
            for file in files:
                try:
                    photo = Photo.objects.create(
                        profile=profile,
                        image=file,
                        is_primary=(not profile.photos.exists()),  # –ü–µ—Ä–≤–∞—è —Ñ–æ—Ç–æ = –æ—Å–Ω–æ–≤–Ω–∞—è
                        is_verified=True
                    )
                    uploaded_count += 1
                except Exception as e:
                    messages.warning(request, f'–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª "{file.name}": {str(e)}')
            
            if uploaded_count > 0:
                messages.success(request, f'–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {uploaded_count} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π!')
            return redirect('profiles:manage_photos')
        else:
            messages.error(request, '–û—à–∏–±–∫–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ.')
    else:
        form = MultiplePhotoUploadForm(profile=profile)
    
    return render_photo_upload_form(request, form, '–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π', single=False)


@login_required
def delete_photo(request, photo_id):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"""
    try:
        profile = Profile.objects.get(user=request.user)
        photo = get_object_or_404(Photo, id=photo_id, profile=profile)
        
        # –ï—Å–ª–∏ —É–¥–∞–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, –Ω–∞–∑–Ω–∞—á–∞–µ–º –¥—Ä—É–≥—É—é –æ—Å–Ω–æ–≤–Ω–æ–π
        if photo.is_primary:
            other_photos = profile.photos.exclude(id=photo_id).first()
            if other_photos:
                other_photos.is_primary = True
                other_photos.save()
        
        photo.delete()
        messages.success(request, '–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —É–¥–∞–ª–µ–Ω–∞!')
        
    except Profile.DoesNotExist:
        messages.error(request, '–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!')
    except Exception as e:
        messages.error(request, f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏: {str(e)}')
    
    return redirect('profiles:manage_photos')


@login_required
def set_primary_photo(request, photo_id):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"""
    try:
        profile = Profile.objects.get(user=request.user)
        photo = get_object_or_404(Photo, id=photo_id, profile=profile)
        
        # –£–±–∏—Ä–∞–µ–º —Ñ–ª–∞–≥ –æ—Å–Ω–æ–≤–Ω–æ–π —É –≤—Å–µ—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
        profile.photos.update(is_primary=False)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –Ω–æ–≤—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
        photo.is_primary = True
        photo.save()
        
        messages.success(request, '–û—Å–Ω–æ–≤–Ω–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –∏–∑–º–µ–Ω–µ–Ω–∞!')
        
    except Profile.DoesNotExist:
        messages.error(request, '–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!')
    except Exception as e:
        messages.error(request, f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏: {str(e)}')
    
    return redirect('profiles:manage_photos')


def render_photos_management(request, profile, photos):
    """–†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏"""
    from django.middleware.csrf import get_token
    csrf_token = get_token(request)
    
    html = f"""
    <!DOCTYPE html>
    <html lang="ru">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ - –°–∞–π—Ç –∑–Ω–∞–∫–æ–º—Å—Ç–≤</title>
        <style>
            body {{ font-family: Arial, sans-serif; margin: 0; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); min-height: 100vh; padding: 20px; }}
            .container {{ max-width: 1000px; margin: 0 auto; background: white; padding: 30px; border-radius: 15px; box-shadow: 0 10px 30px rgba(0,0,0,0.3); }}
            h1 {{ color: #333; text-align: center; margin-bottom: 30px; }}
            .actions {{ text-align: center; margin-bottom: 30px; }}
            .btn {{ padding: 12px 24px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; border: none; border-radius: 8px; font-weight: bold; cursor: pointer; margin: 0 10px; text-decoration: none; display: inline-block; transition: transform 0.2s; }}
            .btn:hover {{ transform: translateY(-2px); }}
            .btn-success {{ background: #28a745; }}
            .btn-danger {{ background: #dc3545; }}
            .btn-secondary {{ background: #6c757d; }}
            .photos-grid {{ display: grid; grid-template-columns: repeat(auto-fill, minmax(250px, 1fr)); gap: 20px; margin-bottom: 30px; }}
            .photo-card {{ background: #f8f9fa; border-radius: 10px; overflow: hidden; box-shadow: 0 2px 8px rgba(0,0,0,0.1); transition: transform 0.2s; }}
            .photo-card:hover {{ transform: translateY(-5px); }}
            .photo-image {{ width: 100%; height: 200px; object-fit: cover; }}
            .photo-info {{ padding: 15px; }}
            .photo-actions {{ display: flex; gap: 10px; margin-top: 10px; }}
            .photo-badge {{ background: #ffc107; color: #333; padding: 3px 8px; border-radius: 5px; font-size: 12px; font-weight: bold; }}
            .messages {{ margin-bottom: 20px; }}
            .message {{ padding: 12px; border-radius: 8px; margin-bottom: 10px; }}
            .message.success {{ background: #d4edda; color: #155724; border: 1px solid #c3e6cb; }}
            .message.error {{ background: #f8d7da; color: #721c24; border: 1px solid #f5c6cb; }}
            .message.info {{ background: #d1ecf1; color: #0c5460; border: 1px solid #bee5eb; }}
            .message.warning {{ background: #fff3cd; color: #856404; border: 1px solid #ffeaa7; }}
            .no-photos {{ text-align: center; padding: 50px; color: #666; }}
            .stats {{ background: #e8f4fd; padding: 20px; border-radius: 8px; margin-bottom: 20px; text-align: center; }}
        </style>
    </head>
    <body>
        <div class="container">
            <h1>üì∏ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏</h1>
            
            <div class="messages">
    """
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    if messages.get_messages(request):
        for message in messages.get_messages(request):
            message_class = message.tags if message.tags else 'info'
            html += f'<div class="message {message_class}">{message}</div>'
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    photos_count = photos.count()
    primary_photo = photos.filter(is_primary=True).first()
    
    html += f"""
            </div>
            
            <div class="stats">
                <h3>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h3>
                <p><strong>–í—Å–µ–≥–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π:</strong> {photos_count}/10</p>
                <p><strong>–û—Å–Ω–æ–≤–Ω–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è:</strong> {'–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞' if primary_photo else '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'}</p>
            </div>
            
            <div class="actions">
                <a href="/profiles/photos/upload/" class="btn">üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é</a>
                <a href="/profiles/photos/upload-multiple/" class="btn btn-success">üì§üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ</a>
                <a href="/profiles/my/" class="btn btn-secondary">üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å</a>
                <a href="/" class="btn btn-secondary">üè† –ì–ª–∞–≤–Ω–∞—è</a>
            </div>
    """
    
    if photos.exists():
        html += '<div class="photos-grid">'
        
        for photo in photos:
            try:
                photo_url = photo.image.url if photo.image else None
                upload_date = photo.uploaded_at.strftime('%d.%m.%Y')
                
                html += f"""
                    <div class="photo-card">
                        <img src="{photo_url}" alt="–§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è" class="photo-image" onerror="this.style.display='none';">
                        <div class="photo-info">
                            <div style="display: flex; justify-content: space-between; align-items: center;">
                                <span>–ó–∞–≥—Ä—É–∂–µ–Ω–æ: {upload_date}</span>
                                {f'<span class="photo-badge">üåü –û—Å–Ω–æ–≤–Ω–∞—è</span>' if photo.is_primary else ''}
                            </div>
                            <div class="photo-actions">
                """
                
                # –ö–Ω–æ–ø–∫–∞ "–°–¥–µ–ª–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π" —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –æ—Å–Ω–æ–≤–Ω–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è
                if not photo.is_primary:
                    html += f'<a href="/profiles/photos/set-primary/{photo.id}/" class="btn" style="padding: 6px 12px; font-size: 12px;">‚≠ê –°–¥–µ–ª–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π</a>'
                
                # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
                html += f"""
                                <a href="/profiles/photos/delete/{photo.id}/" class="btn btn-danger" 
                                   style="padding: 6px 12px; font-size: 12px;"
                                   onclick="return confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é?')">üóëÔ∏è –£–¥–∞–ª–∏—Ç—å</a>
                            </div>
                        </div>
                    </div>
                """
            except Exception:
                continue
        
        html += '</div>'
    else:
        html += """
            <div class="no-photos">
                <h3>üì∑ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π</h3>
                <p>–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å–≤–æ–∏ –ø–µ—Ä–≤—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, —á—Ç–æ–±—ã –¥—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥–ª–∏ —É–≤–∏–¥–µ—Ç—å –≤–∞—Å!</p>
            </div>
        """
    
    html += """
        </div>
    </body>
    </html>
    """
    
    return HttpResponse(html)


def render_photo_upload_form(request, form, title, single=True):
    """–†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Ñ–æ—Ä–º—ã –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
    from django.middleware.csrf import get_token
    csrf_token = get_token(request)
    
    html = f"""
    <!DOCTYPE html>
    <html lang="ru">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>{title} - –°–∞–π—Ç –∑–Ω–∞–∫–æ–º—Å—Ç–≤</title>
        <style>
            body {{ font-family: Arial, sans-serif; margin: 0; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); min-height: 100vh; padding: 20px; }}
            .container {{ max-width: 600px; margin: 0 auto; background: white; padding: 30px; border-radius: 15px; box-shadow: 0 10px 30px rgba(0,0,0,0.3); }}
            h1 {{ color: #333; text-align: center; margin-bottom: 30px; }}
            .form-group {{ margin-bottom: 20px; }}
            .form-group label {{ display: block; margin-bottom: 8px; color: #333; font-weight: bold; }}
            .form-control {{ width: 100%; padding: 12px; border: 2px solid #e1e1e1; border-radius: 8px; font-size: 16px; transition: border-color 0.3s; box-sizing: border-box; }}
            .form-control:focus {{ border-color: #667eea; outline: none; }}
            .form-check {{ display: flex; align-items: center; margin-bottom: 10px; }}
            .form-check-input {{ margin-right: 10px; }}
            .btn {{ padding: 14px 30px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; border: none; border-radius: 8px; font-size: 16px; font-weight: bold; cursor: pointer; transition: transform 0.2s; margin-right: 10px; }}
            .btn:hover {{ transform: translateY(-2px); }}
            .btn-secondary {{ background: #6c757d; }}
            .messages {{ margin-bottom: 20px; }}
            .message {{ padding: 12px; border-radius: 8px; margin-bottom: 10px; }}
            .message.success {{ background: #d4edda; color: #155724; border: 1px solid #c3e6cb; }}
            .message.error {{ background: #f8d7da; color: #721c24; border: 1px solid #f5c6cb; }}
            .message.info {{ background: #d1ecf1; color: #0c5460; border: 1px solid #bee5eb; }}
            .errorlist {{ list-style: none; padding: 0; margin: 5px 0; }}
            .errorlist li {{ color: #721c24; font-size: 14px; }}
            .buttons {{ text-align: center; margin-top: 30px; }}
            .help-text {{ font-size: 14px; color: #666; margin-top: 5px; }}
            .requirements {{ background: #f8f9fa; padding: 15px; border-radius: 8px; margin-bottom: 20px; }}
            .requirements h4 {{ margin-top: 0; color: #495057; }}
            .requirements ul {{ margin-bottom: 0; }}
        </style>
    </head>
    <body>
        <div class="container">
            <h1>üì§ {title}</h1>
            
            <div class="messages">
    """
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    if messages.get_messages(request):
        for message in messages.get_messages(request):
            message_class = message.tags if message.tags else 'info'
            html += f'<div class="message {message_class}">{message}</div>'
    
    form_url = '/profiles/photos/upload/' if single else '/profiles/photos/upload-multiple/'
    
    html += f"""
            </div>
            
            <div class="requirements">
                <h4>üìã –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º:</h4>
                <ul>
                    <li>‚úÖ –§–æ—Ä–º–∞—Ç—ã: JPG, JPEG, PNG, GIF, WEBP</li>
                    <li>‚úÖ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 5MB –Ω–∞ —Ñ–∞–π–ª</li>
                    <li>‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ: 200x200 –ø–∏–∫—Å–µ–ª–µ–π</li>
                    <li>‚úÖ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ: 4000x4000 –ø–∏–∫—Å–µ–ª–µ–π</li>
                    <li>‚úÖ –ú–∞–∫—Å–∏–º—É–º 10 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å</li>
                    {'<li>‚úÖ –ú–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ 5 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∑–∞ —Ä–∞–∑</li>' if not single else ''}
                </ul>
            </div>
            
            <form method="post" action="{form_url}" enctype="multipart/form-data">
                <input type="hidden" name="csrfmiddlewaretoken" value="{csrf_token}">
    """
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–æ–ª—è —Ñ–æ—Ä–º—ã
    for field_name, field in form.fields.items():
        field_value = form.data.get(field_name, '') if form.is_bound else (getattr(form.instance, field_name, '') if hasattr(form, 'instance') else '')
        errors = form.errors.get(field_name, []) if form.is_bound else []
        
        html += f"""
                <div class="form-group">
                    <label for="id_{field_name}">{field.label}:</label>
        """
        
        if field_name == 'is_primary':
            checked = 'checked' if field_value or field.initial else ''
            html += f'<div class="form-check"><input type="checkbox" id="id_{field_name}" name="{field_name}" class="form-check-input" {checked}><label for="id_{field_name}">{field.label}</label></div>'
        else:
            multiple = 'multiple' if field_name == 'images' else ''
            html += f'<input type="file" id="id_{field_name}" name="{field_name}" class="form-control" accept="image/*" {multiple}>'
            if hasattr(field, 'help_text') and field.help_text:
                html += f'<div class="help-text">{field.help_text}</div>'
        
        if errors:
            html += '<ul class="errorlist">'
            for error in errors:
                html += f'<li>{error}</li>'
            html += '</ul>'
        
        html += '</div>'
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–µ –æ—à–∏–±–∫–∏ —Ñ–æ—Ä–º—ã
    if form.non_field_errors():
        html += '<ul class="errorlist">'
        for error in form.non_field_errors():
            html += f'<li>{error}</li>'
        html += '</ul>'
    
    html += f"""
                <div class="buttons">
                    <button type="submit" class="btn">üì§ {'–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é' if single else '–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏'}</button>
                    <a href="/profiles/photos/" class="btn btn-secondary">üì∏ –ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º</a>
                    <a href="/" class="btn btn-secondary">üè† –ì–ª–∞–≤–Ω–∞—è</a>
                </div>
            </form>
        </div>
    </body>
    </html>
    """
    
    return HttpResponse(html)
