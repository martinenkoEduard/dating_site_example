from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth.decorators import login_required
from django.contrib import messages
from django.http import HttpResponse

from django.shortcuts import render, redirect, get_object_or_404
from django.http import HttpResponse, JsonResponse
from django.core.management import call_command
from django.contrib.auth.models import User
from django.contrib.auth.decorators import login_required
from django.contrib import messages
from django.db.utils import OperationalError
from django.db.models import Q
from django.core.paginator import Paginator, EmptyPage, PageNotAnInteger
from django.core.cache import cache
from django.conf import settings
from django import forms
import os


from ..models import Profile
from ..forms import ProfileForm, ProfileSearchForm, AdvancedProfileSearchForm
from ..cache_utils import (
    get_cached_user_profile, invalidate_user_profile_cache,
    get_cached_profile_stats, get_cached_recent_profiles,
    invalidate_search_cache
)


def home(request):
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    
    # –ü–æ–ª—É—á–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ—Ñ–∏–ª–µ–π
    stats = get_cached_profile_stats()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ—Ñ–∏–ª—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω)
    has_profile = False
    if request.user.is_authenticated:
        user_profile = get_cached_user_profile(request.user)
        has_profile = user_profile is not None
    
    # –ü–æ–ª—É—á–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π
    recent_profiles = get_cached_recent_profiles(limit=6)
    
    context = {
        'total_profiles': stats.get('total', 0),
        'male_profiles': stats.get('male', 0),
        'female_profiles': stats.get('female', 0),
        'has_profile': has_profile,
        'recent_profiles': recent_profiles
    }
    
    return render(request, 'home.html', context)


@login_required
def create_profile(request):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø—Ä–æ—Ñ–∏–ª—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if Profile.objects.filter(user=request.user).exists():
        messages.info(request, '–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø—Ä–æ—Ñ–∏–ª—å. –í—ã –º–æ–∂–µ—Ç–µ –µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å.')
        return redirect('profiles:my_profile')
    
    if request.method == 'POST':
        form = ProfileForm(request.POST)
        if form.is_valid():
            profile = form.save(commit=False)
            profile.user = request.user
            profile.save()
            messages.success(request, '–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!')
            return redirect('profiles:my_profile')
        else:
            messages.error(request, '–û—à–∏–±–∫–∏ –≤ —Ñ–æ—Ä–º–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.')
    else:
        form = ProfileForm()
    
    return render_profile_form(request, form, '–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è', 'create')


@login_required
def my_profile(request):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è"""
    try:
        profile = Profile.objects.get(user=request.user)
    except Profile.DoesNotExist:
        messages.info(request, '–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è. –°–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ!')
        return redirect('profiles:create_profile')
    
    return render_profile_view(request, profile, is_own=True)


@login_required
def edit_profile(request):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è —Å –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –∫—ç—à–∞"""
    try:
        profile = get_cached_user_profile(request.user, use_cache=False)  # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
    except Profile.DoesNotExist:
        messages.info(request, '–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è. –°–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ!')
        return redirect('profiles:create_profile')
    
    if not profile:
        messages.info(request, '–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è. –°–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ!')
        return redirect('profiles:create_profile')
    
    if request.method == 'POST':
        form = ProfileForm(request.POST, instance=profile)
        if form.is_valid():
            form.save()
            
            # –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∫—ç—à–∏
            invalidate_user_profile_cache(request.user)
            invalidate_search_cache()  # –ü–æ—Å–∫–æ–ª—å–∫—É –ø—Ä–æ—Ñ–∏–ª—å –∏–∑–º–µ–Ω–∏–ª—Å—è, —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –º–æ–≥—É—Ç –∏–∑–º–µ–Ω–∏—Ç—å—Å—è
            
            messages.success(request, '–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!')
            return redirect('profiles:my_profile')
        else:
            messages.error(request, '–û—à–∏–±–∫–∏ –≤ —Ñ–æ—Ä–º–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.')
    else:
        form = ProfileForm(instance=profile)
    
    return render_profile_form(request, form, '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è', 'edit')


def view_profile(request, profile_id):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä —á—É–∂–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è"""
    try:
        profile = get_object_or_404(Profile, id=profile_id)
        return render_profile_view(request, profile, is_own=False)
    except Profile.DoesNotExist:
        messages.error(request, f'–ü—Ä–æ—Ñ–∏–ª—å —Å ID {profile_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.')
        return redirect('/')
    except Exception as e:
        messages.error(request, f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è: {str(e)}')
        return redirect('/')


def render_profile_form(request, form, title, action):
    """–†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Ñ–æ—Ä–º—ã –ø—Ä–æ—Ñ–∏–ª—è"""
    from django.middleware.csrf import get_token
    csrf_token = get_token(request)
    
    html = f"""
    <!DOCTYPE html>
    <html lang="ru">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>{title} - –°–∞–π—Ç –∑–Ω–∞–∫–æ–º—Å—Ç–≤</title>
        <style>
            body {{ font-family: Arial, sans-serif; margin: 0; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); min-height: 100vh; padding: 20px; }}
            .container {{ max-width: 800px; margin: 0 auto; background: white; padding: 30px; border-radius: 15px; box-shadow: 0 10px 30px rgba(0,0,0,0.3); }}
            h1 {{ color: #333; text-align: center; margin-bottom: 30px; }}
            .form-section {{ margin-bottom: 30px; padding: 20px; background: #f8f9fa; border-radius: 10px; }}
            .form-section h3 {{ color: #495057; margin-bottom: 15px; border-bottom: 2px solid #dee2e6; padding-bottom: 10px; }}
            .form-row {{ display: flex; flex-wrap: wrap; margin-bottom: 15px; }}
            .form-group {{ margin-bottom: 15px; flex: 1; min-width: 300px; margin-right: 15px; }}
            .form-group:last-child {{ margin-right: 0; }}
            .form-group label {{ display: block; margin-bottom: 8px; color: #333; font-weight: bold; }}
            .form-control {{ width: 100%; padding: 12px; border: 2px solid #e1e1e1; border-radius: 8px; font-size: 16px; transition: border-color 0.3s; box-sizing: border-box; }}
            .form-control:focus {{ border-color: #667eea; outline: none; }}
            .form-check {{ display: flex; align-items: center; margin-bottom: 10px; }}
            .form-check-input {{ margin-right: 10px; }}
            .btn {{ padding: 14px 30px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; border: none; border-radius: 8px; font-size: 16px; font-weight: bold; cursor: pointer; transition: transform 0.2s; margin-right: 10px; }}
            .btn:hover {{ transform: translateY(-2px); }}
            .btn-secondary {{ background: #6c757d; }}
            .messages {{ margin-bottom: 20px; }}
            .message {{ padding: 12px; border-radius: 8px; margin-bottom: 10px; }}
            .message.success {{ background: #d4edda; color: #155724; border: 1px solid #c3e6cb; }}
            .message.error {{ background: #f8d7da; color: #721c24; border: 1px solid #f5c6cb; }}
            .message.info {{ background: #d1ecf1; color: #0c5460; border: 1px solid #bee5eb; }}
            .errorlist {{ list-style: none; padding: 0; margin: 5px 0; }}
            .errorlist li {{ color: #721c24; font-size: 14px; }}
            .buttons {{ text-align: center; margin-top: 30px; }}
        </style>
    </head>
    <body>
        <div class="container">
            <h1>üë§ {title}</h1>
            
            <div class="messages">
    """
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    if messages.get_messages(request):
        for message in messages.get_messages(request):
            message_class = 'success' if message.tags == 'success' else ('error' if message.tags == 'error' else 'info')
            html += f'<div class="message {message_class}">{message}</div>'
    
    # URL –¥–ª—è —Ñ–æ—Ä–º—ã
    form_url = '/profiles/create/' if action == 'create' else '/profiles/edit/'
    
    html += f"""
            </div>
            
            <form method="post" action="{form_url}">
                <input type="hidden" name="csrfmiddlewaretoken" value="{csrf_token}">
                
                <div class="form-section">
                    <h3>üìù –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h3>
                    <div class="form-row">
    """
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
    basic_fields = ['nickname', 'age', 'height', 'weight', 'blood_group', 'gender', 'city']
    for field_name in basic_fields:
        if field_name in form.fields:
            field = form.fields[field_name]
            field_value = form.data.get(field_name, '') if form.is_bound else (getattr(form.instance, field_name, '') if form.instance else '')
            errors = form.errors.get(field_name, []) if form.is_bound else []
            
            html += f"""
                        <div class="form-group">
                            <label for="id_{field_name}">{field.label}:</label>
            """
            
            if field_name in ['gender', 'city', 'blood_group']:
                html += f'<select id="id_{field_name}" name="{field_name}" class="form-control">'
                html += '<option value="">---------</option>'
                for value, label in field.choices:
                    selected = 'selected' if str(field_value) == str(value) else ''
                    html += f'<option value="{value}" {selected}>{label}</option>'
                html += '</select>'
            else:
                input_type = 'number' if field_name in ['age', 'height', 'weight'] else 'text'
                html += f'<input type="{input_type}" id="id_{field_name}" name="{field_name}" value="{field_value}" class="form-control">'
            
            if errors:
                html += '<ul class="errorlist">'
                for error in errors:
                    html += f'<li>{error}</li>'
                html += '</ul>'
            
            html += '</div>'
    
    html += """
                    </div>
                </div>
                
                <div class="form-section">
                    <h3>üíù –õ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h3>
                    <div class="form-row">
    """
    
    # –õ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    personal_fields = ['orientation', 'marital_status', 'education', 'employment', 'goal']
    for field_name in personal_fields:
        if field_name in form.fields:
            field = form.fields[field_name]
            field_value = form.data.get(field_name, '') if form.is_bound else (getattr(form.instance, field_name, '') if form.instance else '')
            errors = form.errors.get(field_name, []) if form.is_bound else []
            
            html += f"""
                        <div class="form-group">
                            <label for="id_{field_name}">{field.label}:</label>
            """
            
            if field_name == 'goal':
                html += f'<textarea id="id_{field_name}" name="{field_name}" class="form-control" rows="3">{field_value}</textarea>'
            elif field_name in ['orientation', 'marital_status', 'education', 'employment']:
                html += f'<select id="id_{field_name}" name="{field_name}" class="form-control">'
                html += '<option value="">---------</option>'
                for value, label in field.choices:
                    selected = 'selected' if str(field_value) == str(value) else ''
                    html += f'<option value="{value}" {selected}>{label}</option>'
                html += '</select>'
            
            if errors:
                html += '<ul class="errorlist">'
                for error in errors:
                    html += f'<li>{error}</li>'
                html += '</ul>'
            
            html += '</div>'
    
    html += """
                    </div>
                </div>
                
                <div class="form-section">
                    <h3>üèÉ –û–±—Ä–∞–∑ –∂–∏–∑–Ω–∏ –∏ –∑–¥–æ—Ä–æ–≤—å–µ</h3>
                    <div class="form-row">
    """
    
    # –û–±—Ä–∞–∑ –∂–∏–∑–Ω–∏
    lifestyle_fields = ['smoking', 'alcohol', 'sport', 'health_rating', 'has_diseases']
    for field_name in lifestyle_fields:
        if field_name in form.fields:
            field = form.fields[field_name]
            field_value = form.data.get(field_name, '') if form.is_bound else (getattr(form.instance, field_name, '') if form.instance else '')
            errors = form.errors.get(field_name, []) if form.is_bound else []
            
            if field_name == 'has_diseases':
                checked = 'checked' if field_value else ''
                html += f"""
                        <div class="form-group">
                            <div class="form-check">
                                <input type="checkbox" id="id_{field_name}" name="{field_name}" class="form-check-input" {checked}>
                                <label for="id_{field_name}">{field.label}</label>
                            </div>
                        </div>
                """
            else:
                html += f"""
                        <div class="form-group">
                            <label for="id_{field_name}">{field.label}:</label>
                """
                
                if field_name in ['smoking', 'alcohol', 'sport']:
                    html += f'<select id="id_{field_name}" name="{field_name}" class="form-control">'
                    html += '<option value="">---------</option>'
                    for value, label in field.choices:
                        selected = 'selected' if str(field_value) == str(value) else ''
                        html += f'<option value="{value}" {selected}>{label}</option>'
                    html += '</select>'
                else:  # health_rating
                    html += f'<input type="number" id="id_{field_name}" name="{field_name}" value="{field_value}" class="form-control" min="1" max="10">'
                
                if errors:
                    html += '<ul class="errorlist">'
                    for error in errors:
                        html += f'<li>{error}</li>'
                    html += '</ul>'
                
                html += '</div>'
    
    html += """
                    </div>
                </div>
                
                <div class="buttons">
                    <button type="submit" class="btn">üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
                    <a href="/" class="btn btn-secondary">üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é</a>
                </div>
            </form>
        </div>
    </body>
    </html>
    """
    
    return HttpResponse(html)


def render_profile_view(request, profile, is_own=False):
    """–†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è"""
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è
    photos = profile.photos.filter(is_verified=True).order_by('-is_primary', '-uploaded_at')
    
    context = {
        'profile': profile,
        'photos': photos,
        'is_own': is_own,
    }
    
    return render(request, 'profile_view.html', context)


@login_required
def search_profiles(request):
    """–ü–æ–∏—Å–∫ –ø—Ä–æ—Ñ–∏–ª–µ–π —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    try:
        own_profile = get_cached_user_profile(request.user)
    except Profile.DoesNotExist:
        messages.info(request, '–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å!')
        return redirect('profiles:create_profile')
    
    if not own_profile:
        messages.info(request, '–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å!')
        return redirect('profiles:create_profile')
    
    form = ProfileSearchForm(request.GET or None)
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
    search_params = {}
    if request.GET:
        search_params = dict(request.GET.items())
        search_params['user_id'] = request.user.id  # –î–æ–±–∞–≤–ª—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
    
    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    cached_results = None
    if search_params:
        cached_results = get_cached_search_results(search_params)
    
    if cached_results:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        profiles_list = cached_results['results']
        total_count = cached_results['total_count']
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é –∫ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º
        paginator = Paginator(profiles_list, 12)
        page_number = request.GET.get('page', 1)
        
        try:
            page_obj = paginator.get_page(page_number)
        except (PageNotAnInteger, EmptyPage):
            page_obj = paginator.get_page(1)
    else:
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
        profiles = Profile.objects.search_optimized(exclude_user=request.user)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞ –≤–∞–ª–∏–¥–Ω–∞
        if form.is_valid():
            data = form.cleaned_data
            
            # –§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–ª—É
            if data.get('gender'):
                profiles = profiles.filter(gender=data['gender'])
            
            # –§–∏–ª—å—Ç—Ä –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É
            if data.get('age_min'):
                profiles = profiles.filter(age__gte=data['age_min'])
            if data.get('age_max'):
                profiles = profiles.filter(age__lte=data['age_max'])
            
            # –§–∏–ª—å—Ç—Ä –ø–æ —Ä–æ—Å—Ç—É
            if data.get('height_min'):
                profiles = profiles.filter(height__gte=data['height_min'])
            if data.get('height_max'):
                profiles = profiles.filter(height__lte=data['height_max'])
            
            # –§–∏–ª—å—Ç—Ä –ø–æ –≥–æ—Ä–æ–¥—É
            if data.get('city'):
                profiles = profiles.filter(city=data['city'])
            
            # –§–∏–ª—å—Ç—Ä –ø–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—é
            if data.get('education'):
                profiles = profiles.filter(education=data['education'])
            
            # –§–∏–ª—å—Ç—Ä –ø–æ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏
            if data.get('employment'):
                profiles = profiles.filter(employment=data['employment'])
            
            # –§–∏–ª—å—Ç—Ä –ø–æ –∫—É—Ä–µ–Ω–∏—é
            if data.get('smoking'):
                profiles = profiles.filter(smoking=data['smoking'])
            
            # –§–∏–ª—å—Ç—Ä –ø–æ –∞–ª–∫–æ–≥–æ–ª—é
            if data.get('alcohol'):
                profiles = profiles.filter(alcohol=data['alcohol'])
            
            # –§–∏–ª—å—Ç—Ä –ø–æ –Ω–∞–ª–∏—á–∏—é –¥–µ—Ç–µ–π
            if data.get('has_children') is not None:
                profiles = profiles.filter(has_children=data['has_children'])
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ø–∏—Å–æ–∫
        total_count = profiles.count()
        profiles_list = list(profiles)
        
        # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
        if search_params:
            cache_search_results_data(search_params, profiles_list, total_count, timeout=600)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
        paginator = Paginator(profiles_list, 12)
        page_number = request.GET.get('page', 1)
        
        try:
            page_obj = paginator.get_page(page_number)
        except (PageNotAnInteger, EmptyPage):
            page_obj = paginator.get_page(1)
    
    return render_search_results(request, form, page_obj, total_count)


def render_search_results(request, form, page_obj, total_count):
    """–†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    from django.middleware.csrf import get_token
    csrf_token = get_token(request)
    
    html = f"""
    <!DOCTYPE html>
    <html lang="ru">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>–ü–æ–∏—Å–∫ –ø—Ä–æ—Ñ–∏–ª–µ–π - –°–∞–π—Ç –∑–Ω–∞–∫–æ–º—Å—Ç–≤</title>
        <style>
            body {{ font-family: Arial, sans-serif; margin: 0; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); min-height: 100vh; padding: 20px; }}
            .container {{ max-width: 1200px; margin: 0 auto; background: white; padding: 30px; border-radius: 15px; box-shadow: 0 10px 30px rgba(0,0,0,0.3); }}
            h1 {{ color: #333; text-align: center; margin-bottom: 30px; }}
            .search-section {{ background: #f8f9fa; padding: 20px; border-radius: 10px; margin-bottom: 30px; }}
            .search-form {{ display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; }}
            .form-group {{ margin-bottom: 15px; }}
            .form-group label {{ display: block; margin-bottom: 5px; color: #333; font-weight: bold; font-size: 14px; }}
            .form-control {{ width: 100%; padding: 10px; border: 2px solid #e1e1e1; border-radius: 5px; font-size: 14px; box-sizing: border-box; }}
            .form-control:focus {{ border-color: #667eea; outline: none; }}
            .search-buttons {{ grid-column: 1 / -1; text-align: center; margin-top: 15px; }}
            .btn {{ padding: 12px 24px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; border: none; border-radius: 8px; font-weight: bold; cursor: pointer; margin: 0 10px; text-decoration: none; display: inline-block; }}
            .btn:hover {{ transform: translateY(-2px); }}
            .btn-secondary {{ background: #6c757d; }}
            .btn-clear {{ background: #ffc107; color: #333; }}
            .results-header {{ display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px; }}
            .results-count {{ color: #666; }}
            .profiles-grid {{ display: grid; grid-template-columns: repeat(auto-fill, minmax(300px, 1fr)); gap: 20px; }}
            .profile-card {{ background: #f8f9fa; border-radius: 10px; padding: 20px; border-left: 4px solid #667eea; transition: transform 0.2s; }}
            .profile-card:hover {{ transform: translateY(-5px); box-shadow: 0 5px 15px rgba(0,0,0,0.1); }}
            .profile-header {{ display: flex; align-items: center; margin-bottom: 15px; }}
            .profile-icon {{ font-size: 24px; margin-right: 10px; }}
            .profile-name {{ font-size: 18px; font-weight: bold; color: #333; }}
            .profile-info {{ margin-bottom: 10px; }}
            .profile-info strong {{ color: #495057; }}
            .profile-goal {{ background: white; padding: 10px; border-radius: 5px; font-style: italic; color: #666; margin-bottom: 15px; }}
            .profile-actions {{ text-align: center; }}
            .btn-small {{ padding: 8px 16px; font-size: 14px; }}
            .no-results {{ text-align: center; padding: 40px; color: #666; }}
            .messages {{ margin-bottom: 20px; }}
            .message {{ padding: 12px; border-radius: 8px; margin-bottom: 10px; }}
            .message.info {{ background: #d1ecf1; color: #0c5460; border: 1px solid #bee5eb; }}
            
            /* –°—Ç–∏–ª–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ */
            .pagination {{ margin: 30px 0; text-align: center; }}
            .pagination-info {{ margin-bottom: 15px; color: #666; font-size: 14px; }}
            .pagination-controls {{ display: flex; justify-content: center; align-items: center; flex-wrap: wrap; gap: 5px; }}
            .btn-pagination {{ padding: 8px 12px; margin: 0 2px; text-decoration: none; border-radius: 5px; font-size: 14px; 
                               background: #f8f9fa; color: #333; border: 1px solid #dee2e6; transition: all 0.2s; }}
            .btn-pagination:hover {{ background: #e9ecef; transform: translateY(-1px); }}
            .btn-current {{ background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; border-color: #667eea; }}
            .btn-current:hover {{ background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); transform: none; }}
        </style>
    </head>
    <body>
        <div class="container">
            <h1>üîç –ü–æ–∏—Å–∫ –ø—Ä–æ—Ñ–∏–ª–µ–π</h1>
            
            <div class="messages">
    """
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    if hasattr(request, '_messages'):
        for message in request._messages:
            html += f'<div class="message info">{message}</div>'
    
    html += f"""
            </div>
            
            <div class="search-section">
                <form method="get" class="search-form">
                    <input type="hidden" name="csrfmiddlewaretoken" value="{csrf_token}">
    """
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è —Ñ–æ—Ä–º—ã –ø–æ–∏—Å–∫–∞
    for field_name, field in form.fields.items():
        field_value = form.data.get(field_name, '') if form.is_bound else ''
        
        html += f"""
                    <div class="form-group">
                        <label for="id_{field_name}">{field.label}:</label>
        """
        
        if hasattr(field, 'choices') and field.choices:
            html += f'<select id="id_{field_name}" name="{field_name}" class="form-control">'
            for value, label in field.choices:
                selected = 'selected' if str(field_value) == str(value) else ''
                html += f'<option value="{value}" {selected}>{label}</option>'
            html += '</select>'
        else:
            input_type = 'number' if field_name in ['age_min', 'age_max', 'height_min', 'height_max'] else 'text'
            placeholder = field.widget.attrs.get('placeholder', '')
            html += f'<input type="{input_type}" id="id_{field_name}" name="{field_name}" value="{field_value}" class="form-control" placeholder="{placeholder}">'
        
        html += '</div>'
    
    html += f"""
                    <div class="search-buttons">
                        <button type="submit" class="btn">üîç –ù–∞–π—Ç–∏</button>
                        <a href="/profiles/advanced-search/" class="btn">üîçüîç –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫</a>
                        <a href="/profiles/search/" class="btn btn-clear">üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å</a>
                        <a href="/" class="btn btn-secondary">üè† –ì–ª–∞–≤–Ω–∞—è</a>
                    </div>
                </form>
            </div>
            
            <div class="results-header">
                <h2>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞</h2>
                <div class="results-count">–ù–∞–π–¥–µ–Ω–æ: {total_count} –ø—Ä–æ—Ñ–∏–ª–µ–π (–ø–æ–∫–∞–∑–∞–Ω–æ: {len(page_obj)})</div>
            </div>
    """
    
    if page_obj.object_list:
        html += '<div class="profiles-grid">'
        
        for profile in page_obj.object_list:
            gender_icon = "üë®" if profile.gender == 'male' else "üë©"
            last_online = profile.last_online.strftime('%d.%m.%Y %H:%M')
            
            # –ü–æ–ª—É—á–∞–µ–º –≥–ª–∞–≤–Ω—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
            main_photo = profile.photos.filter(is_primary=True).first()
            photo_url = main_photo.image.url if main_photo and main_photo.image else None
            
            html += f"""
                <div class="profile-card">
                    <div class="profile-header">
                        <div class="profile-icon">{gender_icon}</div>
                        <div class="profile-name">{profile.nickname}</div>
                    </div>
            """
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å
            if photo_url:
                try:
                    html += f"""
                        <div class="profile-photo">
                            <img src="{photo_url}" alt="–§–æ—Ç–æ {profile.nickname}" 
                                 style="width: 100%; height: 200px; object-fit: cover; border-radius: 8px; margin-bottom: 15px;"
                                 onerror="this.style.display='none';">
                        </div>
                    """
                except Exception:
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å –æ—à–∏–±–∫–∞–º–∏
                    pass
            
            html += f"""
                    <div class="profile-info">
                        <strong>–í–æ–∑—Ä–∞—Å—Ç:</strong> {profile.age} –ª–µ—Ç
                    </div>
                    <div class="profile-info">
                        <strong>–ì–æ—Ä–æ–¥:</strong> {profile.get_city_display()}
                    </div>
                    <div class="profile-info">
                        <strong>–†–æ—Å—Ç:</strong> {profile.height} —Å–º
                    </div>
                    <div class="profile-info">
                        <strong>–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ:</strong> {profile.get_education_display()}
                    </div>
                    <div class="profile-info">
                        <strong>–ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞—Ö–æ–¥:</strong> {last_online}
                    </div>
                    <div class="profile-goal">
                        "{profile.goal[:100]}{'...' if len(profile.goal) > 100 else ''}"
                    </div>
                    <div class="profile-actions">
                        <a href="/profiles/view/{profile.id}/" class="btn btn-small">üëÅÔ∏è –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å</a>
                        <a href="/profiles/message/{profile.user.id}/" class="btn btn-small">üíå –ù–∞–ø–∏—Å–∞—Ç—å</a>
                    </div>
                </div>
            """
        
        html += '</div>'
        
        if total_count > 50:
            html += f"""
            <div style="text-align: center; margin-top: 20px; padding: 15px; background: #fff3cd; border-radius: 5px;">
                <p><strong>–ü–æ–∫–∞–∑–∞–Ω–æ –ø–µ—Ä–≤—ã—Ö 50 –ø—Ä–æ—Ñ–∏–ª–µ–π –∏–∑ {total_count}.</strong></p>
                <p>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞.</p>
            </div>
            """
    else:
        html += """
            <div class="no-results">
                <h3>üòî –ü—Ä–æ—Ñ–∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
                <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –∏–ª–∏ –æ—á–∏—Å—Ç–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã.</p>
            </div>
        """
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
    if page_obj.has_other_pages():
        html += """
            <div class="pagination">
                <div class="pagination-info">
        """
        html += f"""
                    –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_obj.number} –∏–∑ {page_obj.paginator.num_pages} 
                    ({page_obj.start_index()}-{page_obj.end_index()} –∏–∑ {total_count} –ø—Ä–æ—Ñ–∏–ª–µ–π)
        """
        html += """
                </div>
                <div class="pagination-controls">
        """
        
        # –ü–æ–ª—É—á–∞–µ–º GET –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
        get_params = request.GET.copy()
        if 'page' in get_params:
            del get_params['page']
        query_string = '&' + get_params.urlencode() if get_params else ''
        
        # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        if page_obj.has_previous():
            html += f'<a href="?page=1{query_string}" class="btn btn-pagination">¬´ –ü–µ—Ä–≤–∞—è</a>'
            html += f'<a href="?page={page_obj.previous_page_number()}{query_string}" class="btn btn-pagination">‚Äπ –ü—Ä–µ–¥—ã–¥—É—â–∞—è</a>'
        
        # –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∏ —Å–æ—Å–µ–¥–Ω–∏–µ
        start_page = max(1, page_obj.number - 2)
        end_page = min(page_obj.paginator.num_pages, page_obj.number + 2)
        
        for page_num in range(start_page, end_page + 1):
            if page_num == page_obj.number:
                html += f'<span class="btn btn-pagination btn-current">{page_num}</span>'
            else:
                html += f'<a href="?page={page_num}{query_string}" class="btn btn-pagination">{page_num}</a>'
        
        # –ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        if page_obj.has_next():
            html += f'<a href="?page={page_obj.next_page_number()}{query_string}" class="btn btn-pagination">–°–ª–µ–¥—É—é—â–∞—è ‚Ä∫</a>'
            html += f'<a href="?page={page_obj.paginator.num_pages}{query_string}" class="btn btn-pagination">–ü–æ—Å–ª–µ–¥–Ω—è—è ¬ª</a>'
        
        html += """
                </div>
            </div>
        """

    html += """
        </div>
    </body>
    </html>
    """
    
    return HttpResponse(html)




@login_required
def advanced_search_profiles(request):
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–π —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –∫—Ä–∏—Ç–µ—Ä–∏—è–º–∏"""
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    try:
        own_profile = Profile.objects.get(user=request.user)
    except Profile.DoesNotExist:
        messages.info(request, '–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å!')
        return redirect('profiles:create_profile')
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–æ—Ä–º—É —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
    form = AdvancedProfileSearchForm(request.GET or None)
    profiles = Profile.objects.exclude(user=request.user).filter(is_active=True)
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞ –≤–∞–ª–∏–¥–Ω–∞
    if form.is_valid():
        data = form.cleaned_data
        
        # ========== –û–°–ù–û–í–ù–´–ï –§–ò–õ–¨–¢–†–´ ==========
        if data.get('gender'):
            profiles = profiles.filter(gender=data['gender'])
        
        if data.get('age_min'):
            profiles = profiles.filter(age__gte=data['age_min'])
        if data.get('age_max'):
            profiles = profiles.filter(age__lte=data['age_max'])
        
        if data.get('city'):
            profiles = profiles.filter(city__in=data['city'])
        
        # ========== –§–ò–ó–ò–ß–ï–°–ö–ò–ï –ü–ê–†–ê–ú–ï–¢–†–´ ==========
        if data.get('height_min'):
            profiles = profiles.filter(height__gte=data['height_min'])
        if data.get('height_max'):
            profiles = profiles.filter(height__lte=data['height_max'])
        
        if data.get('weight_min'):
            profiles = profiles.filter(weight__gte=data['weight_min'])
        if data.get('weight_max'):
            profiles = profiles.filter(weight__lte=data['weight_max'])
        
        if data.get('blood_group'):
            profiles = profiles.filter(blood_group__in=data['blood_group'])
        
        # ========== –û–ë–†–ê–ó–û–í–ê–ù–ò–ï –ò –ö–ê–†–¨–ï–†–ê ==========
        if data.get('education'):
            profiles = profiles.filter(education__in=data['education'])
        
        if data.get('employment'):
            profiles = profiles.filter(employment__in=data['employment'])
        
        # ========== –û–ë–†–ê–ó –ñ–ò–ó–ù–ò ==========
        if data.get('smoking'):
            profiles = profiles.filter(smoking__in=data['smoking'])
        
        if data.get('alcohol'):
            profiles = profiles.filter(alcohol__in=data['alcohol'])
        
        if data.get('sport'):
            profiles = profiles.filter(sport__in=data['sport'])
        
        if data.get('health_rating_min'):
            profiles = profiles.filter(health_rating__gte=data['health_rating_min'])
        if data.get('health_rating_max'):
            profiles = profiles.filter(health_rating__lte=data['health_rating_max'])
        
        # ========== –°–ï–ú–ï–ô–ù–´–ï –û–¢–ù–û–®–ï–ù–ò–Ø ==========
        if data.get('marital_status'):
            profiles = profiles.filter(marital_status__in=data['marital_status'])
        
        if data.get('orientation'):
            profiles = profiles.filter(orientation__in=data['orientation'])
        
        if data.get('has_children'):
            has_children_bool = data['has_children'] == 'True'
            profiles = profiles.filter(has_children=has_children_bool)
        
        if data.get('has_diseases'):
            has_diseases_bool = data['has_diseases'] == 'True'
            profiles = profiles.filter(has_diseases=has_diseases_bool)
        
        # ========== –¶–ï–õ–¨ –ü–û–ò–°–ö–ê ==========
        if data.get('conception_method'):
            profiles = profiles.filter(conception_method__in=data['conception_method'])
        
        if data.get('father_contact'):
            profiles = profiles.filter(father_contact__in=data['father_contact'])
        
        if data.get('payment_approach'):
            profiles = profiles.filter(payment_approach__in=data['payment_approach'])
        
        # ========== –ü–û–ò–°–ö –ü–û –¢–ï–ö–°–¢–£ ==========
        if data.get('search'):
            search_term = data['search']
            profiles = profiles.filter(
                Q(nickname__icontains=search_term) | 
                Q(goal__icontains=search_term)
            )
        
        # ========== –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ï –§–ò–õ–¨–¢–†–´ ==========
        # –¢–æ–ª—å–∫–æ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏
        if data.get('with_photos_only'):
            profiles = profiles.filter(photos__isnull=False).distinct()
        
        # –§–∏–ª—å—Ç—Ä –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        if data.get('online_recently'):
            from django.utils import timezone
            from datetime import timedelta
            
            now = timezone.now()
            if data['online_recently'] == '24h':
                profiles = profiles.filter(last_online__gte=now - timedelta(hours=24))
            elif data['online_recently'] == '3d':
                profiles = profiles.filter(last_online__gte=now - timedelta(days=3))
            elif data['online_recently'] == 'week':
                profiles = profiles.filter(last_online__gte=now - timedelta(weeks=1))
            elif data['online_recently'] == 'month':
                profiles = profiles.filter(last_online__gte=now - timedelta(days=30))
        
        # ========== –°–û–†–¢–ò–†–û–í–ö–ê ==========
        sort_by = data.get('sort_by', '-last_online')
        if sort_by:
            profiles = profiles.order_by(sort_by)
    else:
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        profiles = profiles.order_by('-last_online')
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
    total_count = profiles.count()
    paginator = Paginator(profiles, 12)  # 12 –ø—Ä–æ—Ñ–∏–ª–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É (3x4 —Å–µ—Ç–∫–∞)
    page_number = request.GET.get('page', 1)
    
    try:
        page_obj = paginator.get_page(page_number)
    except PageNotAnInteger:
        page_obj = paginator.get_page(1)
    except EmptyPage:
        page_obj = paginator.get_page(paginator.num_pages)
    
    return render_advanced_search_results(request, form, page_obj, total_count)





def render_advanced_search_results(request, form, page_obj, total_count):
    """–†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    from django.middleware.csrf import get_token
    csrf_token = get_token(request)
    
    html = f"""
    <!DOCTYPE html>
    <html lang="ru">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –ø—Ä–æ—Ñ–∏–ª–µ–π - –°–∞–π—Ç –∑–Ω–∞–∫–æ–º—Å—Ç–≤</title>
        <style>
            body {{ font-family: Arial, sans-serif; margin: 0; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); min-height: 100vh; padding: 20px; }}
            .container {{ max-width: 1400px; margin: 0 auto; background: white; padding: 30px; border-radius: 15px; box-shadow: 0 10px 30px rgba(0,0,0,0.3); }}
            h1 {{ color: #333; text-align: center; margin-bottom: 30px; }}
            
            /* –§–∏–ª—å—Ç—Ä—ã */
            .filters-section {{ background: #f8f9fa; padding: 20px; border-radius: 10px; margin-bottom: 30px; }}
            .filters-toggle {{ text-align: center; margin-bottom: 20px; }}
            .filters-form {{ display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; }}
            .filter-group {{ background: white; padding: 15px; border-radius: 8px; border-left: 4px solid #667eea; }}
            .filter-group h4 {{ margin-top: 0; color: #495057; border-bottom: 1px solid #dee2e6; padding-bottom: 8px; }}
            .form-row {{ display: flex; gap: 10px; align-items: end; margin-bottom: 15px; }}
            .form-group {{ flex: 1; }}
            .form-group label {{ display: block; margin-bottom: 5px; color: #333; font-weight: bold; font-size: 14px; }}
            .form-control {{ width: 100%; padding: 8px; border: 2px solid #e1e1e1; border-radius: 5px; font-size: 14px; box-sizing: border-box; }}
            .form-control:focus {{ border-color: #667eea; outline: none; }}
            
            /* –ß–µ–∫–±–æ–∫—Å—ã */
            .checkbox-list {{ display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 5px; max-height: 120px; overflow-y: auto; }}
            .checkbox-list input[type="checkbox"] {{ margin-right: 8px; }}
            .checkbox-list label {{ font-weight: normal; font-size: 13px; cursor: pointer; }}
            
            /* –ö–Ω–æ–ø–∫–∏ */
            .btn {{ padding: 12px 24px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; border: none; border-radius: 8px; font-weight: bold; cursor: pointer; margin: 0 10px; text-decoration: none; display: inline-block; transition: transform 0.2s; }}
            .btn:hover {{ transform: translateY(-2px); }}
            .btn-secondary {{ background: #6c757d; }}
            .btn-clear {{ background: #ffc107; color: #333; }}
            
            /* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã */
            .results-header {{ display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px; }}
            .results-count {{ color: #666; }}
            .profiles-grid {{ display: grid; grid-template-columns: repeat(auto-fill, minmax(320px, 1fr)); gap: 20px; }}
            .profile-card {{ background: #f8f9fa; border-radius: 10px; padding: 20px; border-left: 4px solid #667eea; transition: transform 0.2s; }}
            .profile-card:hover {{ transform: translateY(-5px); box-shadow: 0 5px 15px rgba(0,0,0,0.1); }}
            .profile-header {{ display: flex; align-items: center; margin-bottom: 15px; }}
            .profile-icon {{ font-size: 24px; margin-right: 10px; }}
            .profile-name {{ font-size: 18px; font-weight: bold; color: #333; }}
            .profile-info {{ margin-bottom: 8px; font-size: 14px; }}
            .profile-info strong {{ color: #495057; }}
            .profile-goal {{ background: white; padding: 10px; border-radius: 5px; font-style: italic; color: #666; margin-bottom: 15px; font-size: 13px; }}
            .profile-actions {{ text-align: center; }}
            .btn-small {{ padding: 8px 16px; font-size: 14px; }}
            .no-results {{ text-align: center; padding: 40px; color: #666; }}
            .messages {{ margin-bottom: 20px; }}
            .message {{ padding: 12px; border-radius: 8px; margin-bottom: 10px; }}
            .message.info {{ background: #d1ecf1; color: #0c5460; border: 1px solid #bee5eb; }}
            
            /* –°–∫—Ä—ã—Ç–∏–µ/–ø–æ–∫–∞–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤ */
            .filters-content {{ display: none; }}
            .filters-content.show {{ display: block; }}
            
            /* –°—Ç–∏–ª–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ */
            .pagination {{ margin: 30px 0; text-align: center; }}
            .pagination-info {{ margin-bottom: 15px; color: #666; font-size: 14px; }}
            .pagination-controls {{ display: flex; justify-content: center; align-items: center; flex-wrap: wrap; gap: 5px; }}
            .btn-pagination {{ padding: 8px 12px; margin: 0 2px; text-decoration: none; border-radius: 5px; font-size: 14px; 
                               background: #f8f9fa; color: #333; border: 1px solid #dee2e6; transition: all 0.2s; }}
            .btn-pagination:hover {{ background: #e9ecef; transform: translateY(-1px); }}
            .btn-current {{ background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; border-color: #667eea; }}
            .btn-current:hover {{ background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); transform: none; }}
        </style>
        <script>
            function toggleFilters() {{
                const content = document.getElementById('filters-content');
                const btn = document.getElementById('toggle-btn');
                if (content.classList.contains('show')) {{
                    content.classList.remove('show');
                    btn.textContent = 'üîç –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã';
                }} else {{
                    content.classList.add('show');
                    btn.textContent = 'üîº –°–∫—Ä—ã—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã';
                }}
            }}
            
            function clearFilters() {{
                document.querySelectorAll('input, select').forEach(el => {{
                    if (el.type === 'checkbox') el.checked = false;
                    else el.value = '';
                }});
            }}
        </script>
    </head>
    <body>
        <div class="container">
            <h1>üîç –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –ø—Ä–æ—Ñ–∏–ª–µ–π</h1>
            
            <div class="messages">
    """
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    if hasattr(request, '_messages'):
        for message in request._messages:
            html += f'<div class="message info">{message}</div>'
    
    html += f"""
            </div>
            
            <div class="filters-section">
                <div class="filters-toggle">
                    <button type="button" id="toggle-btn" class="btn" onclick="toggleFilters()">üîç –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã</button>
                    <a href="/profiles/search/" class="btn btn-secondary">üìã –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫</a>
                    <a href="/" class="btn btn-secondary">üè† –ì–ª–∞–≤–Ω–∞—è</a>
                </div>
                
                <div id="filters-content" class="filters-content">
                    <form method="get" class="filters-form">
                        <input type="hidden" name="csrfmiddlewaretoken" value="{csrf_token}">
    """
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ–ª—è —Ñ–æ—Ä–º—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    field_groups = {
        '–û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã': ['gender', 'age_min', 'age_max', 'city'],
        '–§–∏–∑–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ': ['height_min', 'height_max', 'weight_min', 'weight_max', 'blood_group'],
        '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏ –∫–∞—Ä—å–µ—Ä–∞': ['education', 'employment'],
        '–û–±—Ä–∞–∑ –∂–∏–∑–Ω–∏': ['smoking', 'alcohol', 'sport', 'health_rating_min', 'health_rating_max'],
        '–°–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ': ['marital_status', 'orientation', 'has_children', 'has_diseases'],
        '–¶–µ–ª—å –ø–æ–∏—Å–∫–∞': ['conception_method', 'father_contact', 'payment_approach'],
        '–ü–æ–∏—Å–∫ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏': ['search', 'with_photos_only', 'online_recently', 'sort_by']
    }
    
    for group_name, field_names in field_groups.items():
        html += f"""
                        <div class="filter-group">
                            <h4>{group_name}</h4>
        """
        
        for field_name in field_names:
            if field_name in form.fields:
                field = form.fields[field_name]
                field_value = form.data.get(field_name, '') if form.is_bound else ''
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ (min/max)
                if field_name.endswith('_min') or field_name.endswith('_max'):
                    base_name = field_name.replace('_min', '').replace('_max', '')
                    if f'{base_name}_min' in field_names and f'{base_name}_max' in field_names:
                        # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–æ–µ –ø–æ–ª–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞, —Å–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É
                        if field_name.endswith('_min'):
                            min_field = form.fields[f'{base_name}_min']
                            max_field = form.fields[f'{base_name}_max']
                            min_value = form.data.get(f'{base_name}_min', '') if form.is_bound else ''
                            max_value = form.data.get(f'{base_name}_max', '') if form.is_bound else ''
                            
                            html += f"""
                            <div class="form-row">
                                <div class="form-group">
                                    <label for="id_{base_name}_min">{min_field.label}:</label>
                                    <input type="number" id="id_{base_name}_min" name="{base_name}_min" value="{min_value}" class="form-control" placeholder="{min_field.widget.attrs.get('placeholder', '')}">
                                </div>
                                <div class="form-group">
                                    <label for="id_{base_name}_max">{max_field.label}:</label>
                                    <input type="number" id="id_{base_name}_max" name="{base_name}_max" value="{max_value}" class="form-control" placeholder="{max_field.widget.attrs.get('placeholder', '')}">
                                </div>
                            </div>
                            """
                        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º max –ø–æ–ª–µ, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–æ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ
                        continue
                
                html += f'<div class="form-group"><label for="id_{field_name}">{field.label}:</label>'
                
                # –ß–µ–∫–±–æ–∫—Å—ã –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
                if hasattr(field.widget, 'choices') and isinstance(field.widget, forms.CheckboxSelectMultiple):
                    selected_values = form.data.getlist(field_name) if form.is_bound else []
                    html += '<div class="checkbox-list">'
                    for value, label in field.choices:
                        checked = 'checked' if str(value) in selected_values else ''
                        html += f'''
                            <label>
                                <input type="checkbox" name="{field_name}" value="{value}" {checked}>
                                {label}
                            </label>
                        '''
                    html += '</div>'
                
                # –û–±—ã—á–Ω—ã–µ —Å–µ–ª–µ–∫—Ç—ã
                elif hasattr(field, 'choices') and field.choices:
                    html += f'<select id="id_{field_name}" name="{field_name}" class="form-control">'
                    for value, label in field.choices:
                        selected = 'selected' if str(field_value) == str(value) else ''
                        html += f'<option value="{value}" {selected}>{label}</option>'
                    html += '</select>'
                
                # –ß–µ–∫–±–æ–∫—Å
                elif isinstance(field.widget, forms.CheckboxInput):
                    checked = 'checked' if field_value else ''
                    html += f'<input type="checkbox" id="id_{field_name}" name="{field_name}" class="form-check-input" {checked}>'
                
                # –û–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ
                else:
                    input_type = 'number' if isinstance(field.widget, forms.NumberInput) else 'text'
                    placeholder = field.widget.attrs.get('placeholder', '')
                    html += f'<input type="{input_type}" id="id_{field_name}" name="{field_name}" value="{field_value}" class="form-control" placeholder="{placeholder}">'
                
                html += '</div>'
        
        html += '</div>'
    
    html += f"""
                        <div style="grid-column: 1 / -1; text-align: center; margin-top: 20px;">
                            <button type="submit" class="btn">üîç –ù–∞–π—Ç–∏ –ø—Ä–æ—Ñ–∏–ª–∏</button>
                            <button type="button" class="btn btn-clear" onclick="clearFilters()">üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã</button>
                        </div>
                    </form>
                </div>
            </div>
            
            <div class="results-header">
                <h2>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞</h2>
                <div class="results-count">–ù–∞–π–¥–µ–Ω–æ: {total_count} –ø—Ä–æ—Ñ–∏–ª–µ–π (–ø–æ–∫–∞–∑–∞–Ω–æ: {len(page_obj)})</div>
            </div>
    """
    
    if page_obj.object_list:
        html += '<div class="profiles-grid">'
        
        for profile in page_obj.object_list:
            gender_icon = "üë®" if profile.gender == 'male' else "üë©"
            last_online = profile.last_online.strftime('%d.%m.%Y %H:%M')
            
            # –ü–æ–ª—É—á–∞–µ–º –≥–ª–∞–≤–Ω—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
            main_photo = profile.photos.filter(is_primary=True).first()
            photo_url = main_photo.image.url if main_photo and main_photo.image else None
            
            html += f"""
                <div class="profile-card">
                    <div class="profile-header">
                        <div class="profile-icon">{gender_icon}</div>
                        <div class="profile-name">{profile.nickname}</div>
                    </div>
            """
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å
            if photo_url:
                try:
                    html += f"""
                        <div class="profile-photo">
                            <img src="{photo_url}" alt="–§–æ—Ç–æ {profile.nickname}" 
                                 style="width: 100%; height: 180px; object-fit: cover; border-radius: 8px; margin-bottom: 15px;"
                                 onerror="this.style.display='none';">
                        </div>
                    """
                except Exception:
                    pass
            
            html += f"""
                    <div class="profile-info"><strong>–í–æ–∑—Ä–∞—Å—Ç:</strong> {profile.age} –ª–µ—Ç</div>
                    <div class="profile-info"><strong>–ì–æ—Ä–æ–¥:</strong> {profile.get_city_display()}</div>
                    <div class="profile-info"><strong>–†–æ—Å—Ç/–í–µ—Å:</strong> {profile.height} —Å–º / {profile.weight} –∫–≥</div>
                    <div class="profile-info"><strong>–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ:</strong> {profile.get_education_display()}</div>
                    <div class="profile-info"><strong>–ó–¥–æ—Ä–æ–≤—å–µ:</strong> {profile.health_rating}/10</div>
                    <div class="profile-info"><strong>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</strong> {last_online}</div>
                    <div class="profile-goal">
                        "{profile.goal[:80]}{'...' if len(profile.goal) > 80 else ''}"
                    </div>
                    <div class="profile-actions">
                        <a href="/profiles/view/{profile.id}/" class="btn btn-small">üëÅÔ∏è –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å</a>
                        <a href="/profiles/message/{profile.user.id}/" class="btn btn-small">üíå –ù–∞–ø–∏—Å–∞—Ç—å</a>
                    </div>
                </div>
            """
        
        html += '</div>'
        
        if total_count > 100:
            html += f"""
            <div style="text-align: center; margin-top: 20px; padding: 15px; background: #fff3cd; border-radius: 5px;">
                <p><strong>–ü–æ–∫–∞–∑–∞–Ω–æ –ø–µ—Ä–≤—ã—Ö 100 –ø—Ä–æ—Ñ–∏–ª–µ–π –∏–∑ {total_count}.</strong></p>
                <p>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞.</p>
            </div>
            """
    else:
        html += """
            <div class="no-results">
                <h3>üòî –ü—Ä–æ—Ñ–∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
                <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –∏–ª–∏ –æ—á–∏—Å—Ç–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã.</p>
            </div>
        """
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
    if page_obj.object_list and page_obj.has_other_pages():
        html += """
            <div class="pagination">
                <div class="pagination-info">
        """
        html += f"""
                    –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_obj.number} –∏–∑ {page_obj.paginator.num_pages} 
                    ({page_obj.start_index()}-{page_obj.end_index()} –∏–∑ {total_count} –ø—Ä–æ—Ñ–∏–ª–µ–π)
        """
        html += """
                </div>
                <div class="pagination-controls">
        """
        
        # –ü–æ–ª—É—á–∞–µ–º GET –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
        get_params = request.GET.copy()
        if 'page' in get_params:
            del get_params['page']
        query_string = '&' + get_params.urlencode() if get_params else ''
        
        # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        if page_obj.has_previous():
            html += f'<a href="?page=1{query_string}" class="btn btn-pagination">¬´ –ü–µ—Ä–≤–∞—è</a>'
            html += f'<a href="?page={page_obj.previous_page_number()}{query_string}" class="btn btn-pagination">‚Äπ –ü—Ä–µ–¥—ã–¥—É—â–∞—è</a>'
        
        # –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∏ —Å–æ—Å–µ–¥–Ω–∏–µ
        start_page = max(1, page_obj.number - 2)
        end_page = min(page_obj.paginator.num_pages, page_obj.number + 2)
        
        for page_num in range(start_page, end_page + 1):
            if page_num == page_obj.number:
                html += f'<span class="btn btn-pagination btn-current">{page_num}</span>'
            else:
                html += f'<a href="?page={page_num}{query_string}" class="btn btn-pagination">{page_num}</a>'
        
        # –ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        if page_obj.has_next():
            html += f'<a href="?page={page_obj.next_page_number()}{query_string}" class="btn btn-pagination">–°–ª–µ–¥—É—é—â–∞—è ‚Ä∫</a>'
            html += f'<a href="?page={page_obj.paginator.num_pages}{query_string}" class="btn btn-pagination">–ü–æ—Å–ª–µ–¥–Ω—è—è ¬ª</a>'
        
        html += """
                </div>
            </div>
        """

    html += """
        </div>
    </body>
    </html>
    """
    
    return HttpResponse(html)
