# Generated by Django 5.2.4 on 2025-07-21 20:26

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import profiles.models.base
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Conversation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('last_message_at', models.DateTimeField(auto_now_add=True, verbose_name='Последнее сообщение')),
                ('participant1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='conversations_as_participant1', to=settings.AUTH_USER_MODEL)),
                ('participant2', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='conversations_as_participant2', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Переписка',
                'verbose_name_plural': 'Переписки',
                'ordering': ['-last_message_at'],
                'unique_together': {('participant1', 'participant2')},
            },
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(verbose_name='Содержание сообщения')),
                ('sent_at', models.DateTimeField(auto_now_add=True, verbose_name='Время отправки')),
                ('is_read', models.BooleanField(default=False, verbose_name='Прочитано')),
                ('read_at', models.DateTimeField(blank=True, null=True, verbose_name='Время прочтения')),
                ('conversation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='messages', to='profiles.conversation')),
                ('receiver', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='received_messages', to=settings.AUTH_USER_MODEL)),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_messages', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Сообщение',
                'verbose_name_plural': 'Сообщения',
                'ordering': ['sent_at'],
            },
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('is_active', models.BooleanField(default=True, verbose_name='Активен')),
                ('nickname', models.CharField(max_length=50, verbose_name='Ник')),
                ('age', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(18), django.core.validators.MaxValueValidator(100)], verbose_name='Возраст')),
                ('height', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(100), django.core.validators.MaxValueValidator(250)], verbose_name='Рост (см)')),
                ('weight', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(30), django.core.validators.MaxValueValidator(300)], verbose_name='Вес (кг)')),
                ('blood_group', models.CharField(choices=[('I+', 'I положительная'), ('I-', 'I отрицательная'), ('II+', 'II положительная'), ('II-', 'II отрицательная'), ('III+', 'III положительная'), ('III-', 'III отрицательная'), ('IV+', 'IV положительная'), ('IV-', 'IV отрицательная')], max_length=10, verbose_name='Группа крови')),
                ('gender', models.CharField(choices=[('male', 'Мужской'), ('female', 'Женский')], max_length=10, verbose_name='Пол')),
                ('city', models.CharField(choices=[('moscow', 'Москва'), ('spb', 'Санкт-Петербург'), ('novosibirsk', 'Новосибирск'), ('ekaterinburg', 'Екатеринбург'), ('kazan', 'Казань'), ('nizhny_novgorod', 'Нижний Новгород'), ('chelyabinsk', 'Челябинск'), ('samara', 'Самара'), ('omsk', 'Омск'), ('rostov_on_don', 'Ростов-на-Дону'), ('ufa', 'Уфа'), ('krasnoyarsk', 'Красноярск'), ('voronezh', 'Воронеж'), ('perm', 'Пермь'), ('volgograd', 'Волгоград')], max_length=50, verbose_name='Город')),
                ('orientation', models.CharField(choices=[('traditional', 'Традиционная'), ('non_traditional', 'Нетрадиционная'), ('any', 'Любая')], max_length=20, verbose_name='Сексуальная ориентация')),
                ('marital_status', models.CharField(choices=[('single', 'Не в браке'), ('married', 'В браке'), ('divorced', 'Разведен'), ('widowed', 'Вдовец')], max_length=20, verbose_name='Семейное положение')),
                ('goal', models.TextField(default='Найти партнера для зачатия', verbose_name='Цель поиска')),
                ('education', models.CharField(choices=[('higher', 'Высшее'), ('secondary', 'Среднее'), ('specialized', 'Среднее специальное')], max_length=20, verbose_name='Образование')),
                ('employment', models.CharField(choices=[('employed', 'Имею работу'), ('unemployed', 'Безработный'), ('student', 'Студент')], max_length=20, verbose_name='Занятость')),
                ('smoking', models.CharField(choices=[('no', 'Не курю'), ('yes', 'Курю'), ('quit', 'Бросил')], max_length=10, verbose_name='Отношение к курению')),
                ('alcohol', models.CharField(choices=[('no', 'Не пью'), ('rarely', 'Крайне редко'), ('moderate', 'Умеренно')], max_length=20, verbose_name='Отношение к алкоголю')),
                ('sport', models.CharField(choices=[('active', 'Занимаюсь'), ('inactive', 'Не занимаюсь'), ('sometimes', 'Время от времени')], max_length=20, verbose_name='Отношение к спорту')),
                ('health_rating', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)], verbose_name='Оценка здоровья')),
                ('has_diseases', models.BooleanField(default=False, verbose_name='ВИЧ-инфекция, гепатит')),
                ('conception_method', models.CharField(choices=[('agreement', 'По договоренности'), ('other', 'Другое')], max_length=20, verbose_name='Способ зачатия')),
                ('father_contact', models.CharField(choices=[('not_important', 'Не важно'), ('important', 'Важно')], max_length=20, verbose_name='Контакт с ребенком')),
                ('payment_approach', models.CharField(choices=[('no_payment', 'Без оплаты'), ('with_payment', 'С оплатой')], max_length=20, verbose_name='Оплата')),
                ('looking_for', models.CharField(choices=[('straight_women', 'Женщин-натуралок'), ('lesbian_women', 'Женщин-лесбиянок'), ('woman_woman_pairs', 'Пар женщина-женщина'), ('man_woman_pairs', 'Пар мужчина-женщина'), ('any', 'Любых')], max_length=30, verbose_name='Ищу среди')),
                ('desired_age_min', models.PositiveIntegerField(blank=True, null=True, verbose_name='Желаемый возраст от')),
                ('desired_age_max', models.PositiveIntegerField(blank=True, null=True, verbose_name='Желаемый возраст до')),
                ('desired_height_min', models.PositiveIntegerField(blank=True, null=True, verbose_name='Желаемый рост от')),
                ('desired_height_max', models.PositiveIntegerField(blank=True, null=True, verbose_name='Желаемый рост до')),
                ('desired_weight_min', models.PositiveIntegerField(blank=True, null=True, verbose_name='Желаемый вес от')),
                ('desired_weight_max', models.PositiveIntegerField(blank=True, null=True, verbose_name='Желаемый вес до')),
                ('desired_appearance', models.CharField(blank=True, choices=[('european_light', 'Европейский светлый'), ('south_european', 'Южно-европейский слегка смуглый'), ('swarthy_asian', 'Смуглый азиатский'), ('mongoloid', 'Желтый монголоидный'), ('latin_american', 'Латиноамериканский'), ('negroid', 'Негроидный')], max_length=30, verbose_name='Тип внешности')),
                ('desired_city', models.CharField(blank=True, choices=[('moscow', 'Москва'), ('spb', 'Санкт-Петербург'), ('novosibirsk', 'Новосибирск'), ('ekaterinburg', 'Екатеринбург'), ('kazan', 'Казань'), ('nizhny_novgorod', 'Нижний Новгород'), ('chelyabinsk', 'Челябинск'), ('samara', 'Самара'), ('omsk', 'Омск'), ('rostov_on_don', 'Ростов-на-Дону'), ('ufa', 'Уфа'), ('krasnoyarsk', 'Красноярск'), ('voronezh', 'Воронеж'), ('perm', 'Пермь'), ('volgograd', 'Волгоград')], max_length=50, verbose_name='Желаемый город')),
                ('has_children', models.BooleanField(default=False, verbose_name='Наличие детей')),
                ('photo_required', models.BooleanField(default=False, verbose_name='Обязательно с фотографией')),
                ('last_online', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Последний заход')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Профиль',
                'verbose_name_plural': 'Профили',
                'ordering': ['-last_online'],
            },
        ),
        migrations.CreateModel(
            name='Photo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('image', models.ImageField(upload_to=profiles.models.base.user_photo_path, verbose_name='Фотография')),
                ('is_primary', models.BooleanField(default=False, verbose_name='Основная фотография')),
                ('is_verified', models.BooleanField(default=False, verbose_name='Проверена')),
                ('profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='photos', to='profiles.profile')),
            ],
            options={
                'verbose_name': 'Фотография',
                'verbose_name_plural': 'Фотографии',
                'ordering': ['-is_primary', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='MessageLimit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('unanswered_count', models.PositiveIntegerField(default=0, verbose_name='Количество неотвеченных сообщений')),
                ('last_message_at', models.DateTimeField(auto_now_add=True, verbose_name='Время последнего сообщения')),
                ('hour_reset_at', models.DateTimeField(auto_now_add=True, verbose_name='Время сброса часового лимита')),
                ('receiver', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='received_limits', to=settings.AUTH_USER_MODEL)),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='message_limits', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Лимит сообщений',
                'verbose_name_plural': 'Лимиты сообщений',
                'unique_together': {('sender', 'receiver')},
            },
        ),
        migrations.CreateModel(
            name='Report',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('reason', models.CharField(choices=[('spam', 'Спам'), ('inappropriate', 'Неподобающее поведение'), ('fake_profile', 'Поддельный профиль'), ('harassment', 'Домогательства'), ('other', 'Другое')], max_length=20, verbose_name='Причина жалобы')),
                ('description', models.TextField(blank=True, verbose_name='Описание')),
                ('is_resolved', models.BooleanField(default=False, verbose_name='Рассмотрена')),
                ('reported_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reports_received', to=settings.AUTH_USER_MODEL)),
                ('reporter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reports_made', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Жалоба',
                'verbose_name_plural': 'Жалобы',
                'ordering': ['-created_at'],
                'unique_together': {('reporter', 'reported_user')},
            },
        ),
    ]
