# Generated by Django 5.2.4 on 2025-07-21 20:31

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import profiles.models.base
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Conversation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('last_message_at', models.DateTimeField(auto_now_add=True, verbose_name='Последнее сообщение')),
                ('participant1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='conversations_as_participant1', to=settings.AUTH_USER_MODEL)),
                ('participant2', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='conversations_as_participant2', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Переписка',
                'verbose_name_plural': 'Переписки',
                'ordering': ['-last_message_at'],
                'unique_together': {('participant1', 'participant2')},
            },
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(verbose_name='Содержание сообщения')),
                ('sent_at', models.DateTimeField(auto_now_add=True, verbose_name='Время отправки')),
                ('is_read', models.BooleanField(default=False, verbose_name='Прочитано')),
                ('read_at', models.DateTimeField(blank=True, null=True, verbose_name='Время прочтения')),
                ('conversation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='messages', to='profiles.conversation')),
                ('receiver', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='received_messages', to=settings.AUTH_USER_MODEL)),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_messages', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Сообщение',
                'verbose_name_plural': 'Сообщения',
                'ordering': ['sent_at'],
            },
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('is_active', models.BooleanField(default=True, verbose_name='Активен')),
                ('nickname', models.CharField(max_length=50, verbose_name='Ник')),
                ('age', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(18), django.core.validators.MaxValueValidator(100)], verbose_name='Возраст')),
                ('height', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(100), django.core.validators.MaxValueValidator(250)], verbose_name='Рост (см)')),
                ('weight', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(30), django.core.validators.MaxValueValidator(300)], verbose_name='Вес (кг)')),
                ('blood_group', models.IntegerField(choices=[(1, 'I положительная'), (2, 'I отрицательная'), (3, 'II положительная'), (4, 'II отрицательная'), (5, 'III положительная'), (6, 'III отрицательная'), (7, 'IV положительная'), (8, 'IV отрицательная')], verbose_name='Группа крови')),
                ('gender', models.IntegerField(choices=[(1, 'Мужской'), (2, 'Женский')], verbose_name='Пол')),
                ('city', models.IntegerField(choices=[(1, 'Москва'), (2, 'Санкт-Петербург'), (3, 'Новосибирск'), (4, 'Екатеринбург'), (5, 'Казань'), (6, 'Нижний Новгород'), (7, 'Челябинск'), (8, 'Самара'), (9, 'Омск'), (10, 'Ростов-на-Дону'), (11, 'Уфа'), (12, 'Красноярск'), (13, 'Воронеж'), (14, 'Пермь'), (15, 'Волгоград')], verbose_name='Город')),
                ('orientation', models.IntegerField(choices=[(1, 'Традиционная'), (2, 'Нетрадиционная'), (3, 'Любая')], verbose_name='Сексуальная ориентация')),
                ('marital_status', models.IntegerField(choices=[(1, 'Не в браке'), (2, 'В браке'), (3, 'Разведен'), (4, 'Вдовец')], verbose_name='Семейное положение')),
                ('goal', models.TextField(default='Найти партнера для зачатия', verbose_name='Цель поиска')),
                ('education', models.IntegerField(choices=[(1, 'Высшее'), (2, 'Среднее'), (3, 'Среднее специальное')], verbose_name='Образование')),
                ('employment', models.IntegerField(choices=[(1, 'Имею работу'), (2, 'Безработный'), (3, 'Студент')], verbose_name='Занятость')),
                ('smoking', models.IntegerField(choices=[(1, 'Не курю'), (2, 'Курю'), (3, 'Бросил')], verbose_name='Отношение к курению')),
                ('alcohol', models.IntegerField(choices=[(1, 'Не пью'), (2, 'Крайне редко'), (3, 'Умеренно')], verbose_name='Отношение к алкоголю')),
                ('sport', models.IntegerField(choices=[(1, 'Занимаюсь'), (2, 'Не занимаюсь'), (3, 'Время от времени')], verbose_name='Отношение к спорту')),
                ('health_rating', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)], verbose_name='Оценка здоровья')),
                ('has_diseases', models.BooleanField(default=False, verbose_name='ВИЧ-инфекция, гепатит')),
                ('conception_method', models.IntegerField(choices=[(1, 'По договоренности'), (2, 'Другое')], verbose_name='Способ зачатия')),
                ('father_contact', models.IntegerField(choices=[(1, 'Не важно'), (2, 'Важно')], verbose_name='Контакт с ребенком')),
                ('payment_approach', models.IntegerField(choices=[(1, 'Без оплаты'), (2, 'С оплатой')], verbose_name='Оплата')),
                ('looking_for', models.IntegerField(choices=[(1, 'Женщин-натуралок'), (2, 'Женщин-лесбиянок'), (3, 'Пар женщина-женщина'), (4, 'Пар мужчина-женщина'), (5, 'Любых')], verbose_name='Ищу среди')),
                ('desired_age_min', models.PositiveIntegerField(blank=True, null=True, verbose_name='Желаемый возраст от')),
                ('desired_age_max', models.PositiveIntegerField(blank=True, null=True, verbose_name='Желаемый возраст до')),
                ('desired_height_min', models.PositiveIntegerField(blank=True, null=True, verbose_name='Желаемый рост от')),
                ('desired_height_max', models.PositiveIntegerField(blank=True, null=True, verbose_name='Желаемый рост до')),
                ('desired_weight_min', models.PositiveIntegerField(blank=True, null=True, verbose_name='Желаемый вес от')),
                ('desired_weight_max', models.PositiveIntegerField(blank=True, null=True, verbose_name='Желаемый вес до')),
                ('desired_appearance', models.IntegerField(blank=True, choices=[(1, 'Европейский светлый'), (2, 'Южно-европейский слегка смуглый'), (3, 'Смуглый азиатский'), (4, 'Желтый монголоидный'), (5, 'Латиноамериканский'), (6, 'Негроидный')], null=True, verbose_name='Тип внешности')),
                ('desired_city', models.IntegerField(blank=True, choices=[(1, 'Москва'), (2, 'Санкт-Петербург'), (3, 'Новосибирск'), (4, 'Екатеринбург'), (5, 'Казань'), (6, 'Нижний Новгород'), (7, 'Челябинск'), (8, 'Самара'), (9, 'Омск'), (10, 'Ростов-на-Дону'), (11, 'Уфа'), (12, 'Красноярск'), (13, 'Воронеж'), (14, 'Пермь'), (15, 'Волгоград')], null=True, verbose_name='Желаемый город')),
                ('has_children', models.BooleanField(default=False, verbose_name='Наличие детей')),
                ('photo_required', models.BooleanField(default=False, verbose_name='Обязательно с фотографией')),
                ('last_online', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Последний заход')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Профиль',
                'verbose_name_plural': 'Профили',
                'ordering': ['-last_online'],
            },
        ),
        migrations.CreateModel(
            name='Photo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('image', models.ImageField(upload_to=profiles.models.base.user_photo_path, verbose_name='Фотография')),
                ('is_primary', models.BooleanField(default=False, verbose_name='Основная фотография')),
                ('is_verified', models.BooleanField(default=False, verbose_name='Проверена')),
                ('profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='photos', to='profiles.profile')),
            ],
            options={
                'verbose_name': 'Фотография',
                'verbose_name_plural': 'Фотографии',
                'ordering': ['-is_primary', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='MessageLimit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('unanswered_count', models.PositiveIntegerField(default=0, verbose_name='Количество неотвеченных сообщений')),
                ('last_message_at', models.DateTimeField(auto_now_add=True, verbose_name='Время последнего сообщения')),
                ('hour_reset_at', models.DateTimeField(auto_now_add=True, verbose_name='Время сброса часового лимита')),
                ('receiver', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='received_limits', to=settings.AUTH_USER_MODEL)),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='message_limits', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Лимит сообщений',
                'verbose_name_plural': 'Лимиты сообщений',
                'unique_together': {('sender', 'receiver')},
            },
        ),
        migrations.CreateModel(
            name='Report',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('reason', models.CharField(choices=[('spam', 'Спам'), ('inappropriate', 'Неподобающее поведение'), ('fake_profile', 'Поддельный профиль'), ('harassment', 'Домогательства'), ('other', 'Другое')], max_length=20, verbose_name='Причина жалобы')),
                ('description', models.TextField(blank=True, verbose_name='Описание')),
                ('is_resolved', models.BooleanField(default=False, verbose_name='Рассмотрена')),
                ('reported_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reports_received', to=settings.AUTH_USER_MODEL)),
                ('reporter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reports_made', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Жалоба',
                'verbose_name_plural': 'Жалобы',
                'ordering': ['-created_at'],
                'unique_together': {('reporter', 'reported_user')},
            },
        ),
    ]
