from django.shortcuts import render, redirect, get_object_or_404
from django.http import HttpResponse, JsonResponse
from django.core.management import call_command
from django.contrib.auth.models import User
from django.contrib.auth.decorators import login_required
from django.contrib import messages
from django.db.utils import OperationalError
from django.db.models import Q
from django.core.paginator import Paginator, EmptyPage, PageNotAnInteger
from django.core.cache import cache
from django.conf import settings
from django import forms
import os

from .models import Profile, Photo, Conversation, Message, MessageLimit, Report
from .forms import ProfileForm, ProfileSearchForm, PhotoUploadForm, MultiplePhotoUploadForm, AdvancedProfileSearchForm, MessageForm, ReportForm
from .cache_utils import (
    get_cached_user_profile, invalidate_user_profile_cache,
    get_cached_profile_stats, get_cached_recent_profiles,
    cache_search_results_data, get_cached_search_results, invalidate_search_cache,
    get_cached_conversation_list, cache_conversation_list, invalidate_conversation_cache,
    get_cached_unread_count, cache_unread_count, invalidate_unread_count_cache,
    cache_profile, cache_search_results, cache_conversation_data,
    invalidate_all_profile_caches
)




# ====================== –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –§–û–¢–û–ì–†–ê–§–ò–Ø–ú–ò ======================

@login_required
def manage_photos(request):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ –ø—Ä–æ—Ñ–∏–ª—è"""
    try:
        profile = Profile.objects.get(user=request.user)
    except Profile.DoesNotExist:
        messages.info(request, '–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å!')
        return redirect('profiles:create_profile')
    
    photos = profile.photos.all().order_by('-is_primary', '-uploaded_at')
    
    return render_photos_management(request, profile, photos)


@login_required
def upload_photo(request):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –æ–¥–Ω–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"""
    try:
        profile = Profile.objects.get(user=request.user)
    except Profile.DoesNotExist:
        messages.error(request, '–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å!')
        return redirect('profiles:create_profile')
    
    if request.method == 'POST':
        form = PhotoUploadForm(request.POST, request.FILES, profile=profile)
        if form.is_valid():
            photo = form.save()
            messages.success(request, '–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!')
            return redirect('profiles:manage_photos')
        else:
            messages.error(request, '–û—à–∏–±–∫–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ.')
    else:
        form = PhotoUploadForm(profile=profile)
    
    return render_photo_upload_form(request, form, '–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏', single=True)


@login_required
def upload_multiple_photos(request):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
    try:
        profile = Profile.objects.get(user=request.user)
    except Profile.DoesNotExist:
        messages.error(request, '–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å!')
        return redirect('profiles:create_profile')
    
    if request.method == 'POST':
        form = MultiplePhotoUploadForm(request.POST, request.FILES, profile=profile)
        if form.is_valid():
            files = form.cleaned_data['images']
            uploaded_count = 0
            
            for file in files:
                try:
                    photo = Photo.objects.create(
                        profile=profile,
                        image=file,
                        is_primary=(not profile.photos.exists()),  # –ü–µ—Ä–≤–∞—è —Ñ–æ—Ç–æ = –æ—Å–Ω–æ–≤–Ω–∞—è
                        is_verified=True
                    )
                    uploaded_count += 1
                except Exception as e:
                    messages.warning(request, f'–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª "{file.name}": {str(e)}')
            
            if uploaded_count > 0:
                messages.success(request, f'–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {uploaded_count} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π!')
            return redirect('profiles:manage_photos')
        else:
            messages.error(request, '–û—à–∏–±–∫–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ.')
    else:
        form = MultiplePhotoUploadForm(profile=profile)
    
    return render_photo_upload_form(request, form, '–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π', single=False)


@login_required
def delete_photo(request, photo_id):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"""
    try:
        profile = Profile.objects.get(user=request.user)
        photo = get_object_or_404(Photo, id=photo_id, profile=profile)
        
        # –ï—Å–ª–∏ —É–¥–∞–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, –Ω–∞–∑–Ω–∞—á–∞–µ–º –¥—Ä—É–≥—É—é –æ—Å–Ω–æ–≤–Ω–æ–π
        if photo.is_primary:
            other_photos = profile.photos.exclude(id=photo_id).first()
            if other_photos:
                other_photos.is_primary = True
                other_photos.save()
        
        photo.delete()
        messages.success(request, '–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —É–¥–∞–ª–µ–Ω–∞!')
        
    except Profile.DoesNotExist:
        messages.error(request, '–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!')
    except Exception as e:
        messages.error(request, f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏: {str(e)}')
    
    return redirect('profiles:manage_photos')


@login_required
def set_primary_photo(request, photo_id):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"""
    try:
        profile = Profile.objects.get(user=request.user)
        photo = get_object_or_404(Photo, id=photo_id, profile=profile)
        
        # –£–±–∏—Ä–∞–µ–º —Ñ–ª–∞–≥ –æ—Å–Ω–æ–≤–Ω–æ–π —É –≤—Å–µ—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
        profile.photos.update(is_primary=False)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –Ω–æ–≤—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
        photo.is_primary = True
        photo.save()
        
        messages.success(request, '–û—Å–Ω–æ–≤–Ω–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –∏–∑–º–µ–Ω–µ–Ω–∞!')
        
    except Profile.DoesNotExist:
        messages.error(request, '–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!')
    except Exception as e:
        messages.error(request, f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏: {str(e)}')
    
    return redirect('profiles:manage_photos')


def render_photos_management(request, profile, photos):
    """–†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏"""
    from django.middleware.csrf import get_token
    csrf_token = get_token(request)
    
    html = f"""
    <!DOCTYPE html>
    <html lang="ru">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ - –°–∞–π—Ç –∑–Ω–∞–∫–æ–º—Å—Ç–≤</title>
        <style>
            body {{ font-family: Arial, sans-serif; margin: 0; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); min-height: 100vh; padding: 20px; }}
            .container {{ max-width: 1000px; margin: 0 auto; background: white; padding: 30px; border-radius: 15px; box-shadow: 0 10px 30px rgba(0,0,0,0.3); }}
            h1 {{ color: #333; text-align: center; margin-bottom: 30px; }}
            .actions {{ text-align: center; margin-bottom: 30px; }}
            .btn {{ padding: 12px 24px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; border: none; border-radius: 8px; font-weight: bold; cursor: pointer; margin: 0 10px; text-decoration: none; display: inline-block; transition: transform 0.2s; }}
            .btn:hover {{ transform: translateY(-2px); }}
            .btn-success {{ background: #28a745; }}
            .btn-danger {{ background: #dc3545; }}
            .btn-secondary {{ background: #6c757d; }}
            .photos-grid {{ display: grid; grid-template-columns: repeat(auto-fill, minmax(250px, 1fr)); gap: 20px; margin-bottom: 30px; }}
            .photo-card {{ background: #f8f9fa; border-radius: 10px; overflow: hidden; box-shadow: 0 2px 8px rgba(0,0,0,0.1); transition: transform 0.2s; }}
            .photo-card:hover {{ transform: translateY(-5px); }}
            .photo-image {{ width: 100%; height: 200px; object-fit: cover; }}
            .photo-info {{ padding: 15px; }}
            .photo-actions {{ display: flex; gap: 10px; margin-top: 10px; }}
            .photo-badge {{ background: #ffc107; color: #333; padding: 3px 8px; border-radius: 5px; font-size: 12px; font-weight: bold; }}
            .messages {{ margin-bottom: 20px; }}
            .message {{ padding: 12px; border-radius: 8px; margin-bottom: 10px; }}
            .message.success {{ background: #d4edda; color: #155724; border: 1px solid #c3e6cb; }}
            .message.error {{ background: #f8d7da; color: #721c24; border: 1px solid #f5c6cb; }}
            .message.info {{ background: #d1ecf1; color: #0c5460; border: 1px solid #bee5eb; }}
            .message.warning {{ background: #fff3cd; color: #856404; border: 1px solid #ffeaa7; }}
            .no-photos {{ text-align: center; padding: 50px; color: #666; }}
            .stats {{ background: #e8f4fd; padding: 20px; border-radius: 8px; margin-bottom: 20px; text-align: center; }}
        </style>
    </head>
    <body>
        <div class="container">
            <h1>üì∏ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏</h1>
            
            <div class="messages">
    """
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    if messages.get_messages(request):
        for message in messages.get_messages(request):
            message_class = message.tags if message.tags else 'info'
            html += f'<div class="message {message_class}">{message}</div>'
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    photos_count = photos.count()
    primary_photo = photos.filter(is_primary=True).first()
    
    html += f"""
            </div>
            
            <div class="stats">
                <h3>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h3>
                <p><strong>–í—Å–µ–≥–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π:</strong> {photos_count}/10</p>
                <p><strong>–û—Å–Ω–æ–≤–Ω–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è:</strong> {'–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞' if primary_photo else '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'}</p>
            </div>
            
            <div class="actions">
                <a href="/profiles/photos/upload/" class="btn">üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é</a>
                <a href="/profiles/photos/upload-multiple/" class="btn btn-success">üì§üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ</a>
                <a href="/profiles/my/" class="btn btn-secondary">üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å</a>
                <a href="/" class="btn btn-secondary">üè† –ì–ª–∞–≤–Ω–∞—è</a>
            </div>
    """
    
    if photos.exists():
        html += '<div class="photos-grid">'
        
        for photo in photos:
            try:
                photo_url = photo.image.url if photo.image else None
                upload_date = photo.uploaded_at.strftime('%d.%m.%Y')
                
                html += f"""
                    <div class="photo-card">
                        <img src="{photo_url}" alt="–§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è" class="photo-image" onerror="this.style.display='none';">
                        <div class="photo-info">
                            <div style="display: flex; justify-content: space-between; align-items: center;">
                                <span>–ó–∞–≥—Ä—É–∂–µ–Ω–æ: {upload_date}</span>
                                {f'<span class="photo-badge">üåü –û—Å–Ω–æ–≤–Ω–∞—è</span>' if photo.is_primary else ''}
                            </div>
                            <div class="photo-actions">
                """
                
                # –ö–Ω–æ–ø–∫–∞ "–°–¥–µ–ª–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π" —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –æ—Å–Ω–æ–≤–Ω–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è
                if not photo.is_primary:
                    html += f'<a href="/profiles/photos/set-primary/{photo.id}/" class="btn" style="padding: 6px 12px; font-size: 12px;">‚≠ê –°–¥–µ–ª–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π</a>'
                
                # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
                html += f"""
                                <a href="/profiles/photos/delete/{photo.id}/" class="btn btn-danger" 
                                   style="padding: 6px 12px; font-size: 12px;"
                                   onclick="return confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é?')">üóëÔ∏è –£–¥–∞–ª–∏—Ç—å</a>
                            </div>
                        </div>
                    </div>
                """
            except Exception:
                continue
        
        html += '</div>'
    else:
        html += """
            <div class="no-photos">
                <h3>üì∑ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π</h3>
                <p>–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å–≤–æ–∏ –ø–µ—Ä–≤—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, —á—Ç–æ–±—ã –¥—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥–ª–∏ —É–≤–∏–¥–µ—Ç—å –≤–∞—Å!</p>
            </div>
        """
    
    html += """
        </div>
    </body>
    </html>
    """
    
    return HttpResponse(html)


def render_photo_upload_form(request, form, title, single=True):
    """–†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Ñ–æ—Ä–º—ã –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
    from django.middleware.csrf import get_token
    csrf_token = get_token(request)
    
    html = f"""
    <!DOCTYPE html>
    <html lang="ru">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>{title} - –°–∞–π—Ç –∑–Ω–∞–∫–æ–º—Å—Ç–≤</title>
        <style>
            body {{ font-family: Arial, sans-serif; margin: 0; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); min-height: 100vh; padding: 20px; }}
            .container {{ max-width: 600px; margin: 0 auto; background: white; padding: 30px; border-radius: 15px; box-shadow: 0 10px 30px rgba(0,0,0,0.3); }}
            h1 {{ color: #333; text-align: center; margin-bottom: 30px; }}
            .form-group {{ margin-bottom: 20px; }}
            .form-group label {{ display: block; margin-bottom: 8px; color: #333; font-weight: bold; }}
            .form-control {{ width: 100%; padding: 12px; border: 2px solid #e1e1e1; border-radius: 8px; font-size: 16px; transition: border-color 0.3s; box-sizing: border-box; }}
            .form-control:focus {{ border-color: #667eea; outline: none; }}
            .form-check {{ display: flex; align-items: center; margin-bottom: 10px; }}
            .form-check-input {{ margin-right: 10px; }}
            .btn {{ padding: 14px 30px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; border: none; border-radius: 8px; font-size: 16px; font-weight: bold; cursor: pointer; transition: transform 0.2s; margin-right: 10px; }}
            .btn:hover {{ transform: translateY(-2px); }}
            .btn-secondary {{ background: #6c757d; }}
            .messages {{ margin-bottom: 20px; }}
            .message {{ padding: 12px; border-radius: 8px; margin-bottom: 10px; }}
            .message.success {{ background: #d4edda; color: #155724; border: 1px solid #c3e6cb; }}
            .message.error {{ background: #f8d7da; color: #721c24; border: 1px solid #f5c6cb; }}
            .message.info {{ background: #d1ecf1; color: #0c5460; border: 1px solid #bee5eb; }}
            .errorlist {{ list-style: none; padding: 0; margin: 5px 0; }}
            .errorlist li {{ color: #721c24; font-size: 14px; }}
            .buttons {{ text-align: center; margin-top: 30px; }}
            .help-text {{ font-size: 14px; color: #666; margin-top: 5px; }}
            .requirements {{ background: #f8f9fa; padding: 15px; border-radius: 8px; margin-bottom: 20px; }}
            .requirements h4 {{ margin-top: 0; color: #495057; }}
            .requirements ul {{ margin-bottom: 0; }}
        </style>
    </head>
    <body>
        <div class="container">
            <h1>üì§ {title}</h1>
            
            <div class="messages">
    """
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    if messages.get_messages(request):
        for message in messages.get_messages(request):
            message_class = message.tags if message.tags else 'info'
            html += f'<div class="message {message_class}">{message}</div>'
    
    form_url = '/profiles/photos/upload/' if single else '/profiles/photos/upload-multiple/'
    
    html += f"""
            </div>
            
            <div class="requirements">
                <h4>üìã –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º:</h4>
                <ul>
                    <li>‚úÖ –§–æ—Ä–º–∞—Ç—ã: JPG, JPEG, PNG, GIF, WEBP</li>
                    <li>‚úÖ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 5MB –Ω–∞ —Ñ–∞–π–ª</li>
                    <li>‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ: 200x200 –ø–∏–∫—Å–µ–ª–µ–π</li>
                    <li>‚úÖ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ: 4000x4000 –ø–∏–∫—Å–µ–ª–µ–π</li>
                    <li>‚úÖ –ú–∞–∫—Å–∏–º—É–º 10 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å</li>
                    {'<li>‚úÖ –ú–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ 5 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∑–∞ —Ä–∞–∑</li>' if not single else ''}
                </ul>
            </div>
            
            <form method="post" action="{form_url}" enctype="multipart/form-data">
                <input type="hidden" name="csrfmiddlewaretoken" value="{csrf_token}">
    """
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–æ–ª—è —Ñ–æ—Ä–º—ã
    for field_name, field in form.fields.items():
        field_value = form.data.get(field_name, '') if form.is_bound else (getattr(form.instance, field_name, '') if hasattr(form, 'instance') else '')
        errors = form.errors.get(field_name, []) if form.is_bound else []
        
        html += f"""
                <div class="form-group">
                    <label for="id_{field_name}">{field.label}:</label>
        """
        
        if field_name == 'is_primary':
            checked = 'checked' if field_value or field.initial else ''
            html += f'<div class="form-check"><input type="checkbox" id="id_{field_name}" name="{field_name}" class="form-check-input" {checked}><label for="id_{field_name}">{field.label}</label></div>'
        else:
            multiple = 'multiple' if field_name == 'images' else ''
            html += f'<input type="file" id="id_{field_name}" name="{field_name}" class="form-control" accept="image/*" {multiple}>'
            if hasattr(field, 'help_text') and field.help_text:
                html += f'<div class="help-text">{field.help_text}</div>'
        
        if errors:
            html += '<ul class="errorlist">'
            for error in errors:
                html += f'<li>{error}</li>'
            html += '</ul>'
        
        html += '</div>'
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–µ –æ—à–∏–±–∫–∏ —Ñ–æ—Ä–º—ã
    if form.non_field_errors():
        html += '<ul class="errorlist">'
        for error in form.non_field_errors():
            html += f'<li>{error}</li>'
        html += '</ul>'
    
    html += f"""
                <div class="buttons">
                    <button type="submit" class="btn">üì§ {'–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é' if single else '–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏'}</button>
                    <a href="/profiles/photos/" class="btn btn-secondary">üì∏ –ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º</a>
                    <a href="/" class="btn btn-secondary">üè† –ì–ª–∞–≤–Ω–∞—è</a>
                </div>
            </form>
        </div>
    </body>
    </html>
    """
    
    return HttpResponse(html)


# ====================== –†–ê–°–®–ò–†–ï–ù–ù–´–ô –ü–û–ò–°–ö –ü–†–û–§–ò–õ–ï–ô ======================



# ====================== –°–ò–°–¢–ï–ú–ê –°–û–û–ë–©–ï–ù–ò–ô ======================

@login_required
def conversations_list(request):
    """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–µ—Ä–µ–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    try:
        own_profile = get_cached_user_profile(request.user)
    except Profile.DoesNotExist:
        messages.info(request, '–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å!')
        return redirect('profiles:create_profile')
    
    if not own_profile:
        messages.info(request, '–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å!')
        return redirect('profiles:create_profile')
    
    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–ø–∏—Å–∫–∏
    cached_conversations = get_cached_conversation_list(request.user)
    
    if cached_conversations is not None:
        conversation_data = cached_conversations
    else:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        conversations = Conversation.objects.filter(
            Q(participant1=request.user) | Q(participant2=request.user)
        ).prefetch_related('messages').order_by('-last_message_at')
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–µ—Ä–µ–ø–∏—Å–∫–∏
        conversation_data = []
        for conv in conversations:
            other_user = conv.get_other_participant(request.user)
            try:
                other_profile = get_cached_user_profile(other_user)
            except Profile.DoesNotExist:
                continue
            
            if not other_profile:
                continue
            
            # –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            last_message = conv.messages.last()
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            unread_count = conv.messages.filter(receiver=request.user, is_read=False).count()
            
            conversation_data.append({
                'conversation': conv,
                'other_user': other_user,
                'other_profile': other_profile,
                'last_message': last_message,
                'unread_count': unread_count
            })
        
        # –ö—ç—à–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–ø–∏—Å–æ–∫
        cache_conversation_list(request.user, conversation_data, timeout=180)
    
    return render_conversations_list(request, conversation_data)


@login_required
def conversation_detail(request, conversation_id):
    """–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–µ—Ä–µ–ø–∏—Å–∫–∏"""
    try:
        conversation = Conversation.objects.get(id=conversation_id)
    except Conversation.DoesNotExist:
        messages.error(request, '–ü–µ—Ä–µ–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!')
        return redirect('profiles:conversations_list')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –ø–µ—Ä–µ–ø–∏—Å–∫–µ
    if request.user not in [conversation.participant1, conversation.participant2]:
        messages.error(request, '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –ø–µ—Ä–µ–ø–∏—Å–∫–µ!')
        return redirect('profiles:conversations_list')
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
    other_user = conversation.get_other_participant(request.user)
    try:
        other_profile = get_cached_user_profile(other_user)
    except Profile.DoesNotExist:
        messages.error(request, '–ü—Ä–æ—Ñ–∏–ª—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω!')
        return redirect('profiles:conversations_list')
    
    if not other_profile:
        messages.error(request, '–ü—Ä–æ—Ñ–∏–ª—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω!')
        return redirect('profiles:conversations_list')
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø–µ—Ä–µ–ø–∏—Å–∫–µ —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
    messages_qs = Message.objects.in_conversation(conversation).order_by('sent_at')
    
    # –û—Ç–º–µ—á–∞–µ–º –≤—Å–µ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ (–¥–æ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏)
    unread_messages = Message.objects.unread_for_user(request.user).filter(conversation=conversation)
    for msg in unread_messages:
        msg.mark_as_read()
    
    # –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    if unread_messages.exists():
        invalidate_unread_count_cache(request.user)
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é –∫ —Å–æ–æ–±—â–µ–Ω–∏—è–º (20 —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É)
    paginator = Paginator(messages_qs, 20)
    page_number = request.GET.get('page', 1)
    
    try:
        messages_page = paginator.get_page(page_number)
    except PageNotAnInteger:
        messages_page = paginator.get_page(1)
    except EmptyPage:
        messages_page = paginator.get_page(paginator.num_pages)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    message_form = MessageForm()
    if request.method == 'POST':
        if 'send_message' in request.POST:
            message_form = MessageForm(request.POST)
            if message_form.is_valid():
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –∞–Ω—Ç–∏—Å–ø–∞–º
                can_send, error_msg = check_message_limits(request.user, other_user)
                if can_send:
                    # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    Message.objects.create(
                        conversation=conversation,
                        sender=request.user,
                        receiver=other_user,
                        content=message_form.cleaned_data['content']
                    )
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø–µ—Ä–µ–ø–∏—Å–∫–µ
                    conversation.update_last_message_time()
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –ª–∏–º–∏—Ç—ã
                    update_message_limits(request.user, other_user)
                    
                    # –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à–∏ –ø–µ—Ä–µ–ø–∏—Å–æ–∫ –¥–ª—è –æ–±–æ–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                    invalidate_conversation_cache(request.user)
                    invalidate_conversation_cache(other_user)
                    invalidate_unread_count_cache(other_user)  # –£ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –ø–æ—è–≤–∏–ª–æ—Å—å –Ω–æ–≤–æ–µ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    
                    messages.success(request, '–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!')
                    return redirect('profiles:conversation_detail', conversation_id=conversation.id)
                else:
                    messages.error(request, error_msg)
    
    return render_conversation_detail(request, conversation, other_profile, messages_page, message_form)


@login_required
def start_conversation(request, user_id):
    """–ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –ø–µ—Ä–µ–ø–∏—Å–∫—É —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    try:
        other_user = User.objects.get(id=user_id)
        other_profile = Profile.objects.get(user=other_user)
    except (User.DoesNotExist, Profile.DoesNotExist):
        messages.error(request, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!')
        return redirect('profiles:search_profiles')
    
    # –ù–µ–ª—å–∑—è –ø–∏—Å–∞—Ç—å —Å–∞–º–æ–º—É —Å–µ–±–µ
    if other_user == request.user:
        messages.error(request, '–ù–µ–ª—å–∑—è –Ω–∞–ø–∏—Å–∞—Ç—å —Å–∞–º–æ–º—É —Å–µ–±–µ!')
        return redirect('profiles:view_profile', profile_id=other_profile.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
    can_send, error_msg = check_message_limits(request.user, other_user)
    if not can_send:
        messages.error(request, error_msg)
        return redirect('profiles:view_profile', profile_id=other_profile.id)
    
    # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–µ—Ä–µ–ø–∏—Å–∫—É
    conversation = Conversation.objects.filter(
        Q(participant1=request.user, participant2=other_user) |
        Q(participant1=other_user, participant2=request.user)
    ).first()
    
    # –ï—Å–ª–∏ –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
    if not conversation:
        conversation = Conversation.objects.create(
            participant1=request.user,
            participant2=other_user
        )
    
    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ –ø–µ—Ä–µ–ø–∏—Å–∫—É
    return redirect('profiles:conversation_detail', conversation_id=conversation.id)


@login_required
def report_user(request, user_id):
    """–ü–æ–¥–∞—Ç—å –∂–∞–ª–æ–±—É –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        reported_user = User.objects.get(id=user_id)
        reported_profile = Profile.objects.get(user=reported_user)
    except (User.DoesNotExist, Profile.DoesNotExist):
        messages.error(request, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!')
        return redirect('profiles:search_profiles')
    
    # –ù–µ–ª—å–∑—è –∂–∞–ª–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Å–∞–º–æ–≥–æ —Å–µ–±—è
    if reported_user == request.user:
        messages.error(request, '–ù–µ–ª—å–∑—è –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Å–∞–º–æ–≥–æ —Å–µ–±—è!')
        return redirect('profiles:view_profile', profile_id=reported_profile.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–¥–∞–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∂–∞–ª–æ–±—É
    existing_report = Report.objects.filter(
        reporter=request.user,
        reported_user=reported_user
    ).first()
    
    if existing_report:
        messages.info(request, '–í—ã —É–∂–µ –ø–æ–¥–∞–ª–∏ –∂–∞–ª–æ–±—É –Ω–∞ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.')
        return redirect('profiles:view_profile', profile_id=reported_profile.id)
    
    form = ReportForm()
    if request.method == 'POST':
        form = ReportForm(request.POST)
        if form.is_valid():
            Report.objects.create(
                reporter=request.user,
                reported_user=reported_user,
                reason=form.cleaned_data['reason'],
                description=form.cleaned_data['description']
            )
            messages.success(request, '–ñ–∞–ª–æ–±–∞ –ø–æ–¥–∞–Ω–∞ –∏ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π.')
            return redirect('profiles:view_profile', profile_id=reported_profile.id)
    
    return render_report_form(request, reported_profile, form)


def check_message_limits(sender, receiver):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–∏–º–∏—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π (–∞–Ω—Ç–∏—Å–ø–∞–º)"""
    try:
        limit, created = MessageLimit.objects.get_or_create(
            sender=sender,
            receiver=receiver
        )
        
        if not limit.can_send_message():
            return False, '–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π. –î–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∞ –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ —á–∞—Å.'
        
        return True, None
    except Exception:
        return True, None


def update_message_limits(sender, receiver):
    """–û–±–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏"""
    try:
        limit, created = MessageLimit.objects.get_or_create(
            sender=sender,
            receiver=receiver
        )
        limit.increment_unanswered()
        
        # –ï—Å–ª–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –µ–≥–æ –ª–∏–º–∏—Ç
        reverse_limit = MessageLimit.objects.filter(
            sender=receiver,
            receiver=sender
        ).first()
        if reverse_limit:
            reverse_limit.reset_unanswered()
    except Exception:
        pass


# ====================== –†–ï–ù–î–ï–†–ò–ù–ì –°–¢–†–ê–ù–ò–¶ –°–û–û–ë–©–ï–ù–ò–ô ======================

def render_conversations_list(request, conversation_data):
    """–†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å–ø–∏—Å–∫–∞ –ø–µ—Ä–µ–ø–∏—Å–æ–∫"""
    from django.middleware.csrf import get_token
    csrf_token = get_token(request)
    
    html = f"""
    <!DOCTYPE html>
    <html lang="ru">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>–ú–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è - –°–∞–π—Ç –∑–Ω–∞–∫–æ–º—Å—Ç–≤</title>
        <style>
            body {{ font-family: Arial, sans-serif; margin: 0; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); min-height: 100vh; padding: 20px; }}
            .container {{ max-width: 1200px; margin: 0 auto; background: white; padding: 30px; border-radius: 15px; box-shadow: 0 10px 30px rgba(0,0,0,0.3); }}
            h1 {{ color: #333; text-align: center; margin-bottom: 30px; }}
            
            .header-actions {{ text-align: center; margin-bottom: 30px; }}
            .btn {{ padding: 12px 24px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; border: none; border-radius: 8px; font-weight: bold; cursor: pointer; margin: 0 10px; text-decoration: none; display: inline-block; transition: transform 0.2s; }}
            .btn:hover {{ transform: translateY(-2px); }}
            .btn-secondary {{ background: #6c757d; }}
            
            .conversations-list {{ display: grid; gap: 15px; }}
            .conversation-item {{ background: #f8f9fa; border-radius: 10px; padding: 20px; border-left: 4px solid #667eea; transition: transform 0.2s, box-shadow 0.2s; cursor: pointer; }}
            .conversation-item:hover {{ transform: translateY(-2px); box-shadow: 0 5px 15px rgba(0,0,0,0.1); }}
            .conversation-item.unread {{ border-left-color: #28a745; background: #f0fff4; }}
            
            .conv-header {{ display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px; }}
            .conv-user {{ display: flex; align-items: center; }}
            .conv-avatar {{ font-size: 24px; margin-right: 15px; }}
            .conv-name {{ font-size: 18px; font-weight: bold; color: #333; }}
            .conv-time {{ color: #666; font-size: 14px; }}
            
            .conv-last-message {{ color: #555; margin-bottom: 10px; font-style: italic; }}
            .conv-preview {{ max-height: 40px; overflow: hidden; text-overflow: ellipsis; }}
            
            .conv-meta {{ display: flex; justify-content: space-between; align-items: center; }}
            .unread-badge {{ background: #28a745; color: white; padding: 4px 8px; border-radius: 12px; font-size: 12px; font-weight: bold; }}
            .conv-actions {{ display: flex; gap: 10px; }}
            .btn-small {{ padding: 6px 12px; font-size: 12px; }}
            
            .no-conversations {{ text-align: center; padding: 40px; color: #666; }}
            .messages {{ margin-bottom: 20px; }}
            .message {{ padding: 12px; border-radius: 8px; margin-bottom: 10px; }}
            .message.success {{ background: #d4edda; color: #155724; border: 1px solid #c3e6cb; }}
            .message.error {{ background: #f8d7da; color: #721c24; border: 1px solid #f5c6cb; }}
            .message.info {{ background: #d1ecf1; color: #0c5460; border: 1px solid #bee5eb; }}
        </style>
    </head>
    <body>
        <div class="container">
            <h1>üí¨ –ú–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è</h1>
            
            <div class="messages">
    """
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    from django.contrib.messages import get_messages
    for message in get_messages(request):
        message_class = message.tags if message.tags else 'info'
        html += f'<div class="message {message_class}">{message}</div>'
    
    html += f"""
            </div>
            
            <div class="header-actions">
                <a href="/profiles/search/" class="btn">üîç –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞</a>
                <a href="/profiles/advanced-search/" class="btn">üîçüîç –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫</a>
                <a href="/" class="btn btn-secondary">üè† –ì–ª–∞–≤–Ω–∞—è</a>
            </div>
    """
    
    if conversation_data:
        html += '<div class="conversations-list">'
        
        for conv_data in conversation_data:
            conv = conv_data['conversation']
            other_profile = conv_data['other_profile']
            last_message = conv_data['last_message']
            unread_count = conv_data['unread_count']
            
            unread_class = 'unread' if unread_count > 0 else ''
            gender_icon = "üë®" if other_profile.gender == 'male' else "üë©"
            
            last_msg_preview = ''
            last_msg_time = ''
            if last_message:
                content = last_message.content[:100]
                if len(last_message.content) > 100:
                    content += '...'
                sender_prefix = '–í—ã: ' if last_message.sender == request.user else f'{other_profile.nickname}: '
                last_msg_preview = f'{sender_prefix}{content}'
                last_msg_time = last_message.sent_at.strftime('%d.%m.%Y %H:%M')
            
            html += f"""
                <div class="conversation-item {unread_class}" onclick="window.location.href='/profiles/conversations/{conv.id}/'">
                    <div class="conv-header">
                        <div class="conv-user">
                            <div class="conv-avatar">{gender_icon}</div>
                            <div class="conv-name">{other_profile.nickname}</div>
                        </div>
                        <div class="conv-time">{last_msg_time}</div>
                    </div>
                    
                    {f'<div class="conv-last-message"><div class="conv-preview">{last_msg_preview}</div></div>' if last_msg_preview else ''}
                    
                    <div class="conv-meta">
                        <div>
                            <strong>–í–æ–∑—Ä–∞—Å—Ç:</strong> {other_profile.age} –ª–µ—Ç, 
                            <strong>–ì–æ—Ä–æ–¥:</strong> {other_profile.get_city_display()}
                        </div>
                        {f'<div class="unread-badge">{unread_count} –Ω–æ–≤—ã—Ö</div>' if unread_count > 0 else ''}
                    </div>
                </div>
            """
        
        html += '</div>'
    else:
        html += """
            <div class="no-conversations">
                <h3>üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π</h3>
                <p>–ù–∞–π–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –ª—é–¥–µ–π –∏ –Ω–∞—á–Ω–∏—Ç–µ –æ–±—â–µ–Ω–∏–µ!</p>
                <a href="/profiles/search/" class="btn">üîç –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞</a>
            </div>
        """
    
    html += """
        </div>
    </body>
    </html>
    """
    
    return HttpResponse(html)


def render_conversation_detail(request, conversation, other_profile, messages_page, message_form):
    """–†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–µ—Ä–µ–ø–∏—Å–∫–∏"""
    from django.middleware.csrf import get_token
    csrf_token = get_token(request)
    
    html = f"""
    <!DOCTYPE html>
    <html lang="ru">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>–ü–µ—Ä–µ–ø–∏—Å–∫–∞ —Å {other_profile.nickname} - –°–∞–π—Ç –∑–Ω–∞–∫–æ–º—Å—Ç–≤</title>
        <style>
            body {{ font-family: Arial, sans-serif; margin: 0; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); min-height: 100vh; padding: 20px; }}
            .container {{ max-width: 900px; margin: 0 auto; background: white; border-radius: 15px; box-shadow: 0 10px 30px rgba(0,0,0,0.3); display: flex; flex-direction: column; height: 80vh; }}
            
            .chat-header {{ background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 20px; border-radius: 15px 15px 0 0; }}
            .header-content {{ display: flex; justify-content: space-between; align-items: center; }}
            .user-info {{ display: flex; align-items: center; }}
            .user-avatar {{ font-size: 24px; margin-right: 15px; }}
            .user-details h2 {{ margin: 0; }}
            .user-details p {{ margin: 5px 0 0 0; opacity: 0.9; }}
            .header-actions {{ display: flex; gap: 10px; }}
            .btn {{ padding: 8px 16px; background: rgba(255,255,255,0.2); color: white; border: none; border-radius: 6px; text-decoration: none; font-size: 14px; transition: background 0.2s; }}
            .btn:hover {{ background: rgba(255,255,255,0.3); }}
            
            .messages-container {{ flex: 1; overflow-y: auto; padding: 20px; display: flex; flex-direction: column; gap: 15px; }}
            .message-item {{ max-width: 70%; padding: 12px 16px; border-radius: 18px; word-wrap: break-word; }}
            .message-sent {{ align-self: flex-end; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; border-bottom-right-radius: 6px; }}
            .message-received {{ align-self: flex-start; background: #f1f3f4; color: #333; border-bottom-left-radius: 6px; }}
            .message-time {{ font-size: 11px; opacity: 0.7; margin-top: 5px; }}
            .message-status {{ font-size: 11px; opacity: 0.7; margin-top: 5px; }}
            
            .message-form {{ background: #f8f9fa; padding: 20px; border-radius: 0 0 15px 15px; border-top: 1px solid #dee2e6; }}
            .form-row {{ display: flex; gap: 10px; align-items: end; }}
            .form-control {{ flex: 1; padding: 12px; border: 2px solid #e1e1e1; border-radius: 20px; resize: none; font-family: inherit; }}
            .form-control:focus {{ border-color: #667eea; outline: none; }}
            .btn-send {{ padding: 12px 20px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; border: none; border-radius: 20px; font-weight: bold; cursor: pointer; }}
            .btn-send:hover {{ opacity: 0.9; }}
            .btn-send:disabled {{ opacity: 0.5; cursor: not-allowed; }}
            
            .form-help {{ font-size: 12px; color: #666; margin-top: 5px; }}
            .form-errors {{ color: #dc3545; font-size: 14px; margin-bottom: 10px; }}
            .no-messages {{ text-align: center; color: #666; padding: 40px; }}
            
            .messages {{ margin-bottom: 15px; }}
            .message {{ padding: 12px; border-radius: 8px; margin-bottom: 10px; }}
            .message.success {{ background: #d4edda; color: #155724; border: 1px solid #c3e6cb; }}
            .message.error {{ background: #f8d7da; color: #721c24; border: 1px solid #f5c6cb; }}
            
            /* –°—Ç–∏–ª–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π */
            .pagination {{ margin: 20px 0; text-align: center; }}
            .pagination-info {{ margin-bottom: 10px; color: #666; font-size: 12px; }}
            .pagination-controls {{ display: flex; justify-content: center; align-items: center; flex-wrap: wrap; gap: 3px; }}
            .btn-pagination {{ padding: 6px 10px; margin: 0 1px; text-decoration: none; border-radius: 4px; font-size: 12px; 
                               background: #f8f9fa; color: #333; border: 1px solid #dee2e6; transition: all 0.2s; }}
            .btn-pagination:hover {{ background: #e9ecef; transform: translateY(-1px); }}
            .btn-current {{ background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; border-color: #667eea; }}
            .btn-current:hover {{ background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); transform: none; }}
        </style>
        <script>
            function scrollToBottom() {{
                const container = document.querySelector('.messages-container');
                container.scrollTop = container.scrollHeight;
            }}
            
            window.addEventListener('load', scrollToBottom);
            
            function autoResize(textarea) {{
                textarea.style.height = 'auto';
                textarea.style.height = Math.min(textarea.scrollHeight, 120) + 'px';
            }}
        </script>
    </head>
    <body>
        <div class="container">
            <div class="chat-header">
                <div class="header-content">
                    <div class="user-info">
                        <div class="user-avatar">{"üë®" if other_profile.gender == 'male' else "üë©"}</div>
                        <div class="user-details">
                            <h2>{other_profile.nickname}</h2>
                            <p>{other_profile.age} –ª–µ—Ç, {other_profile.get_city_display()}</p>
                        </div>
                    </div>
                    <div class="header-actions">
                        <a href="/profiles/view/{other_profile.id}/" class="btn">üëÅÔ∏è –ü—Ä–æ—Ñ–∏–ª—å</a>
                        <a href="/profiles/report/{other_profile.user.id}/" class="btn">‚ö†Ô∏è –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è</a>
                        <a href="/profiles/conversations/" class="btn">üì® –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è</a>
                    </div>
                </div>
            </div>
            
            <div class="messages">
    """
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    from django.contrib.messages import get_messages
    for message in get_messages(request):
        message_class = message.tags if message.tags else 'info'
        html += f'<div class="message {message_class}">{message}</div>'
    
    html += '</div>'
    
    # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π
    html += '<div class="messages-container">'
    
    if messages_page.object_list:
        for msg in messages_page.object_list:
            is_sent = msg.sender == request.user
            message_class = 'message-sent' if is_sent else 'message-received'
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
            msg_time = msg.sent_at.strftime('%d.%m.%Y %H:%M')
            
            # –°—Ç–∞—Ç—É—Å –ø—Ä–æ—á—Ç–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            read_status = ''
            if is_sent:
                if msg.is_read:
                    read_status = f'<div class="message-status">‚úì‚úì –ü—Ä–æ—á–∏—Ç–∞–Ω–æ {msg.read_at.strftime("%H:%M") if msg.read_at else ""}</div>'
                else:
                    read_status = '<div class="message-status">‚úì –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ</div>'
            
            html += f"""
                <div class="message-item {message_class}">
                    <div>{msg.content}</div>
                    <div class="message-time">{msg_time}</div>
                    {read_status}
                </div>
            """
    else:
        html += """
            <div class="no-messages">
                <h3>üí≠ –ù–∞—á–Ω–∏—Ç–µ –ø–µ—Ä–µ–ø–∏—Å–∫—É</h3>
                <p>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!</p>
            </div>
        """
    
    html += '</div>'
    
    # –§–æ—Ä–º–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    form_errors = ''
    if message_form.errors:
        for field, errors in message_form.errors.items():
            for error in errors:
                form_errors += f'<div class="form-errors">{error}</div>'
    
    message_value = message_form.data.get('content', '') if message_form.is_bound else ''
    
    html += f"""
            <div class="message-form">
                {form_errors}
                <form method="post">
                    <input type="hidden" name="csrfmiddlewaretoken" value="{csrf_token}">
                    <div class="form-row">
                        <textarea name="content" class="form-control" placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..." 
                                  rows="1" maxlength="1000" oninput="autoResize(this)" required>{message_value}</textarea>
                        <button type="submit" name="send_message" class="btn-send">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
                    </div>
                    <div class="form-help">–ú–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤, –º–∞–∫—Å–∏–º—É–º 1000. –ó–∞–ø—Ä–µ—â–µ–Ω—ã –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏ —Å—Å—ã–ª–∫–∏.</div>
                </form>
            </div>
        </div>
    </body>
    </html>
    """
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
    if messages_page.has_other_pages():
        html += """
            <div class="pagination">
                <div class="pagination-info">
        """
        html += f"""
                    –°—Ç—Ä–∞–Ω–∏—Ü–∞ {messages_page.number} –∏–∑ {messages_page.paginator.num_pages} 
                    ({messages_page.start_index()}-{messages_page.end_index()} –∏–∑ {messages_page.paginator.count} —Å–æ–æ–±—â–µ–Ω–∏–π)
        """
        html += """
                </div>
                <div class="pagination-controls">
        """
        
        # –ü–æ–ª—É—á–∞–µ–º GET –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
        get_params = request.GET.copy()
        if 'page' in get_params:
            del get_params['page']
        query_string = '&' + get_params.urlencode() if get_params else ''
        
        # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        if messages_page.has_previous():
            html += f'<a href="?page=1{query_string}" class="btn btn-pagination">¬´ –ü–µ—Ä–≤–∞—è</a>'
            html += f'<a href="?page={messages_page.previous_page_number()}{query_string}" class="btn btn-pagination">‚Äπ –ü—Ä–µ–¥</a>'
        
        # –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∏ —Å–æ—Å–µ–¥–Ω–∏–µ
        start_page = max(1, messages_page.number - 2)
        end_page = min(messages_page.paginator.num_pages, messages_page.number + 2)
        
        for page_num in range(start_page, end_page + 1):
            if page_num == messages_page.number:
                html += f'<span class="btn btn-pagination btn-current">{page_num}</span>'
            else:
                html += f'<a href="?page={page_num}{query_string}" class="btn btn-pagination">{page_num}</a>'
        
        # –ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        if messages_page.has_next():
            html += f'<a href="?page={messages_page.next_page_number()}{query_string}" class="btn btn-pagination">–°–ª–µ–¥ ‚Ä∫</a>'
            html += f'<a href="?page={messages_page.paginator.num_pages}{query_string}" class="btn btn-pagination">–ü–æ—Å–ª–µ–¥–Ω—è—è ¬ª</a>'
        
        html += """
                </div>
            </div>
        """

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Ñ–æ—Ä–º—ã
    
    return HttpResponse(html)


def render_report_form(request, reported_profile, form):
    """–†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Ñ–æ—Ä–º—ã –∂–∞–ª–æ–±—ã"""
    from django.middleware.csrf import get_token
    csrf_token = get_token(request)
    
    form_errors = ''
    if form.errors:
        for field, errors in form.errors.items():
            for error in errors:
                form_errors += f'<div class="form-errors">{error}</div>'
    
    html = f"""
    <!DOCTYPE html>
    <html lang="ru">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>–ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è –Ω–∞ {reported_profile.nickname} - –°–∞–π—Ç –∑–Ω–∞–∫–æ–º—Å—Ç–≤</title>
        <style>
            body {{ font-family: Arial, sans-serif; margin: 0; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); min-height: 100vh; padding: 20px; }}
            .container {{ max-width: 600px; margin: 0 auto; background: white; padding: 30px; border-radius: 15px; box-shadow: 0 10px 30px rgba(0,0,0,0.3); }}
            h1 {{ color: #333; text-align: center; margin-bottom: 30px; }}
            
            .user-info {{ background: #f8f9fa; padding: 20px; border-radius: 10px; margin-bottom: 30px; text-align: center; }}
            .user-avatar {{ font-size: 48px; margin-bottom: 10px; }}
            .user-name {{ font-size: 24px; font-weight: bold; color: #333; margin-bottom: 5px; }}
            .user-details {{ color: #666; }}
            
            .form-group {{ margin-bottom: 20px; }}
            .form-group label {{ display: block; margin-bottom: 8px; color: #333; font-weight: bold; }}
            .form-control {{ width: 100%; padding: 12px; border: 2px solid #e1e1e1; border-radius: 8px; font-size: 16px; box-sizing: border-box; }}
            .form-control:focus {{ border-color: #667eea; outline: none; }}
            
            .form-errors {{ color: #dc3545; font-size: 14px; margin-bottom: 15px; padding: 10px; background: #f8d7da; border-radius: 5px; }}
            .form-help {{ font-size: 14px; color: #666; margin-top: 5px; }}
            
            .form-actions {{ text-align: center; margin-top: 30px; }}
            .btn {{ padding: 12px 24px; border: none; border-radius: 8px; font-weight: bold; cursor: pointer; margin: 0 10px; text-decoration: none; display: inline-block; transition: transform 0.2s; }}
            .btn:hover {{ transform: translateY(-2px); }}
            .btn-primary {{ background: linear-gradient(135deg, #dc3545 0%, #c82333 100%); color: white; }}
            .btn-secondary {{ background: #6c757d; color: white; }}
            
            .warning {{ background: #fff3cd; color: #856404; padding: 15px; border-radius: 8px; margin-bottom: 20px; border: 1px solid #ffeeba; }}
        </style>
    </head>
    <body>
        <div class="container">
            <h1>‚ö†Ô∏è –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</h1>
            
            <div class="user-info">
                <div class="user-avatar">{"üë®" if reported_profile.gender == 'male' else "üë©"}</div>
                <div class="user-name">{reported_profile.nickname}</div>
                <div class="user-details">{reported_profile.age} –ª–µ—Ç, {reported_profile.get_city_display()}</div>
            </div>
            
            <div class="warning">
                <strong>–í–∞–∂–Ω–æ:</strong> –ñ–∞–ª–æ–±—ã —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—é—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π. –õ–æ–∂–Ω—ã–µ –∂–∞–ª–æ–±—ã –º–æ–≥—É—Ç –ø–æ–≤–ª–µ—á—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.
            </div>
            
            {form_errors}
            
            <form method="post">
                <input type="hidden" name="csrfmiddlewaretoken" value="{csrf_token}">
                
                <div class="form-group">
                    <label for="id_reason">–ü—Ä–∏—á–∏–Ω–∞ –∂–∞–ª–æ–±—ã:</label>
                    <select id="id_reason" name="reason" class="form-control" required>
    """
    
    for value, label in form.fields['reason'].choices:
        selected = 'selected' if form.data.get('reason') == value else ''
        html += f'<option value="{value}" {selected}>{label}</option>'
    
    description_value = form.data.get('description', '') if form.is_bound else ''
    
    html += f"""
                    </select>
                </div>
                
                <div class="form-group">
                    <label for="id_description">–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–≤–µ–¥–µ–Ω–∏—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):</label>
                    <textarea id="id_description" name="description" class="form-control" rows="4" 
                              placeholder="–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–µ–µ..." maxlength="500">{description_value}</textarea>
                    <div class="form-help">–ú–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤</div>
                </div>
                
                <div class="form-actions">
                    <button type="submit" class="btn btn-primary">üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∂–∞–ª–æ–±—É</button>
                    <a href="/profiles/view/{reported_profile.id}/" class="btn btn-secondary">‚ùå –û—Ç–º–µ–Ω–∞</a>
                </div>
            </form>
        </div>
    </body>
    </html>
    """
    
    return HttpResponse(html)


def get_user_profile(user, use_cache=True):
    """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–º–µ–Ω–µ–Ω–∞ –Ω–∞ get_cached_user_profile –∏–∑ cache_utils.py
    return get_cached_user_profile(user, use_cache)


def invalidate_user_profile_cache(user):
    """–û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–º–µ–Ω–µ–Ω–∞ –Ω–∞ —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ cache_utils.py
    invalidate_user_profile_cache(user)
